// DOM Elements
let serviceModal;
let modalContent;
const closeModal = document.querySelector('.close');
const contactForm = document.getElementById('contactForm');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM)
let mobileNavItems;
let pages;

// ===== –°–ò–°–¢–ï–ú–ê –£–ú–ù–û–ì–û –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø =====

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const CACHE_KEYS = {
    reviews: 'app_cache_reviews_v1',
    requests: 'app_cache_requests_v1',
    stats: 'app_cache_stats_v1',
    averageRating: 'app_cache_rating_v1'
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CACHE_CONFIG = {
    reviews: {
        keepInCache: 30, // –¥–Ω–µ–π
        loadMoreButton: true,
        maxItems: 1000
    },
    requests: {
        keepInCache: 30, // –¥–Ω–µ–π
        loadMoreButton: false,
        maxItems: 1000
    },
    chatMessages: {
        keepInCache: 7, // –¥–Ω–µ–π
        loadMoreButton: true,
        maxItems: 1000
    },
    stats: {
        keepInCache: 1, // –¥–µ–Ω—å
        loadMoreButton: false,
        maxItems: 100
    },
    averageRating: {
        keepInCache: 30, // –¥–Ω–µ–π
        loadMoreButton: false,
        maxItems: 1
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
window.hasMoreReviews = false;
window.hasMoreChatMessages = false;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
let globalOrders = [];
let globalChatMessages = [];

// Reviews pagination
let reviewsPage = 0;
let reviewsPerPage = 25;
let allReviews = [];
let hasMoreReviews = false;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
window.dataCache = {
    reviews: {
        data: [],
        lastUpdate: 0,
        updateInterval: 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç
    },
    requests: {
        data: [],
        lastUpdate: 0,
        updateInterval: 30 * 1000 // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    },
    chatMessages: {
        data: {},
        lastUpdate: 0,
        updateInterval: 10 * 1000 // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —á–∞—Ç–∞
    },
    stats: {
        data: {},
        lastUpdate: 0,
        updateInterval: 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
    },
    averageRating: {
        data: null,
        lastUpdate: 0,
        updateInterval: 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç
    }
};

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø LOCALSTORAGE =====

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
function saveToCache(dataType, data) {
    try {
        const config = CACHE_CONFIG[dataType];
        const now = Date.now();
        const cutoffDate = now - (config.keepInCache * 24 * 60 * 60 * 1000);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
        let filteredData = data;
        if (Array.isArray(data)) {
            filteredData = data.filter(item => {
                const itemDate = new Date(item.timestamp || item.date || item.review_date).getTime();
                return itemDate > cutoffDate;
            });
        }
        
        const cacheData = {
            data: filteredData,
            lastUpdate: now,
            totalCount: Array.isArray(data) ? data.length : 1,
            hasMoreData: Array.isArray(data) ? data.length > filteredData.length : false
        };
        
        localStorage.setItem(CACHE_KEYS[dataType], JSON.stringify(cacheData));
        console.log(`üíæ –ö—ç—à ${dataType} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filteredData.length} –∏–∑ ${data.length} –∑–∞–ø–∏—Å–µ–π`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
        if (dataType === 'reviews') {
            window.hasMoreReviews = cacheData.hasMoreData;
        }
        
    } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:`, error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
function loadFromCache(dataType) {
    try {
        const cached = localStorage.getItem(CACHE_KEYS[dataType]);
        if (cached) {
            const cacheData = JSON.parse(cached);
            const timeSinceUpdate = Date.now() - cacheData.lastUpdate;
            const config = CACHE_CONFIG[dataType];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
            if (timeSinceUpdate < config.keepInCache * 24 * 60 * 60 * 1000) {
                console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à ${dataType} –∏–∑ localStorage: ${cacheData.data.length} –∑–∞–ø–∏—Å–µ–π`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
                if (window.dataCache && window.dataCache[dataType]) {
                    window.dataCache[dataType].data = cacheData.data;
                    window.dataCache[dataType].lastUpdate = cacheData.lastUpdate;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏
                if (dataType === 'reviews') {
                    window.hasMoreReviews = cacheData.hasMoreData;
                }
                
                return cacheData.data;
            } else {
                console.log(`‚è∞ –ö—ç—à ${dataType} —É—Å—Ç–∞—Ä–µ–ª, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ`);
            }
        }
    } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:`, error);
    }
    return null;
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø INDEXEDDB =====

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB
function initIndexedDB() {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open('AppCacheDB', 1);
        
        request.onerror = () => reject(request.error);
        request.onsuccess = () => resolve(request.result);
        
        request.onupgradeneeded = (event) => {
            const db = event.target.result;
            
            // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —á–∞—Ç–∞
            if (!db.objectStoreNames.contains('chatMessages')) {
                const store = db.createObjectStore('chatMessages', { keyPath: 'id' });
                store.createIndex('timestamp', 'timestamp', { unique: false });
            }
        };
    });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ IndexedDB
async function saveChatToIndexedDB(messages) {
    try {
        const db = await initIndexedDB();
        const transaction = db.transaction(['chatMessages'], 'readwrite');
        const store = transaction.objectStore('chatMessages');
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        await store.clear();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        const limitedMessages = messages.slice(-CACHE_CONFIG.chatMessages.maxItems);
        
        for (const message of limitedMessages) {
            await store.add({
                id: message.id || Date.now() + Math.random(),
                ...message,
                timestamp: Date.now()
            });
        }
        
        console.log(`üíæ ${limitedMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ IndexedDB`);
        window.hasMoreChatMessages = messages.length > limitedMessages.length;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ IndexedDB:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞ –∏–∑ IndexedDB
async function loadChatFromIndexedDB() {
    try {
        const db = await initIndexedDB();
        const transaction = db.transaction(['chatMessages'], 'readonly');
        const store = transaction.objectStore('chatMessages');
        const request = store.getAll();
        
        return new Promise((resolve, reject) => {
            request.onsuccess = () => {
                const messages = request.result.sort((a, b) => a.timestamp - b.timestamp);
                console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ IndexedDB`);
                resolve(messages);
            };
            request.onerror = () => reject(request.error);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ IndexedDB:', error);
        return [];
    }
}

// ===== –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• =====

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–±—ç–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏)
async function loadDataFromBackend(dataType, limit = 50) {
    console.log(`üîç loadDataFromBackend: ${dataType}, limit: ${limit}`);
    try {
        const response = await fetch(`${BACKEND_URL}/api/frontend/data/${dataType}`);
        
        if (response.ok) {
            const result = await response.json();
            const allData = result.success ? result.data : [];
            console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ ${dataType}: ${allData.length} –∑–∞–ø–∏—Å–µ–π`);
            
            // –î–ª—è –æ—Ç–∑—ã–≤–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            let paginatedData;
            if (dataType === 'reviews' || dataType === 'requests') {
                paginatedData = allData; // –í—Å–µ –æ—Ç–∑—ã–≤—ã –∏ –∑–∞–∫–∞–∑—ã
            } else {
                paginatedData = allData.slice(-limit); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            }
            
            return {
                data: paginatedData,
                total: allData.length,
                hasMore: dataType === 'reviews' ? false : allData.length > limit
            };
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${dataType}:`, error);
    }
    
    return { data: [], total: 0, hasMore: false };
}

// –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å fallback
async function loadDataWithFallback(dataType, forceUpdate = false) {
    console.log(`üîç loadDataWithFallback: ${dataType}, forceUpdate: ${forceUpdate}`);
    
    // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É (–∫—Ä–æ–º–µ –æ—Ç–∑—ã–≤–æ–≤)
    let cachedData = null;
    
    if (dataType === 'chatMessages') {
        cachedData = await loadChatFromIndexedDB();
    } else if (dataType !== 'reviews') {
        // –î–ª—è –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º
        cachedData = loadFromCache(dataType);
    }
    
    if (cachedData && !forceUpdate && dataType !== 'reviews' && dataType !== 'requests') {
        console.log(`üì¶ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ${dataType}: ${cachedData.length} –∑–∞–ø–∏—Å–µ–π`);
        displayData(dataType, cachedData);
    }
    
    // –î–ª—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (dataType === 'requests' && cachedData && !forceUpdate) {
        console.log(`üì¶ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: ${cachedData.length} –∑–∞–∫–∞–∑–æ–≤`);
        displayData(dataType, cachedData);
    }
    
    // 2. –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    try {
        if (dataType === 'chatMessages') {
            await updateChatIncrementally();
        } else {
            await updateDataWithFullReplace(dataType);
        }
    } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ${dataType}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à`);
    }
}

// –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–∑—ã–≤–æ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
async function updateDataWithFullReplace(dataType) {
    try {
        // –î–ª—è –æ—Ç–∑—ã–≤–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const limit = (dataType === 'reviews' || dataType === 'requests') ? 1000 : 100;
        const result = await loadDataFromBackend(dataType, limit);
        
        if (result.data.length > 0) {
            // –î–ª—è –æ—Ç–∑—ã–≤–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤ –æ—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (dataType === 'reviews' || dataType === 'requests') {
                // –û—á–∏—â–∞–µ–º –∫—ç—à
                localStorage.removeItem(CACHE_KEYS[dataType]);
                if (window.dataCache && window.dataCache[dataType]) {
                    window.dataCache[dataType].data = [];
                }
                console.log(`üßπ –ö—ç—à ${dataType} –æ—á–∏—â–µ–Ω –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º`);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫—ç—à
            if (dataType === 'chatMessages') {
                await saveChatToIndexedDB(result.data);
            } else {
                saveToCache(dataType, result.data);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
            if (window.dataCache && window.dataCache[dataType]) {
                window.dataCache[dataType].data = result.data;
                window.dataCache[dataType].lastUpdate = Date.now();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            displayData(dataType, result.data);
            
            console.log(`‚úÖ ${dataType} –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${result.data.length} –∑–∞–ø–∏—Å–µ–π`);
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${dataType}:`, error);
    }
}

// –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞
async function updateChatIncrementally() {
    try {
        const cachedMessages = await loadChatFromIndexedDB();
        const lastMessageId = cachedMessages.length > 0 ? 
            Math.max(...cachedMessages.map(m => m.id)) : 0;
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const result = await loadDataFromBackend('chatMessages', 50);
        
        if (result.data.length > 0) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const newMessages = result.data.filter(msg => msg.id > lastMessageId);
            
            if (newMessages.length > 0) {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                const allMessages = [...cachedMessages, ...newMessages];
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                await saveChatToIndexedDB(allMessages);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                displayData('chatMessages', allMessages);
                
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${newMessages.length} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function displayData(dataType, data) {
    switch (dataType) {
        case 'reviews':
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            globalReviews = data.map(review => {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                let userName;
                if (review.username) {
                    userName = `@${review.username}`;
                } else if (review.first_name) {
                    userName = review.first_name;
                } else {
                    userName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                }
                
                return {
                    user: userName,
                    rating: review.rating,
                    comment: review.comment,
                    date: review.review_date || new Date(review.timestamp).toLocaleDateString('ru-RU')
                };
            });
            updateReviewsDisplay();
            break;
        case 'requests':
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentUserData = window.userData || userData;
            const currentUserId = currentUserData?.id;
            

            
            console.log('üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', {
                totalOrders: data.length,
                currentUserData: currentUserData,
                currentUserId: currentUserId,
                currentUserIdType: typeof currentUserId,
                windowUserData: window.userData,
                localUserData: userData,
                firstOrder: data[0] ? { id: data[0].id, user_id: data[0].user_id, user_id_type: typeof data[0].user_id } : null,
                ordersWithUnknown: data.filter(order => String(order.user_id || '') === 'unknown').length
            });
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ID
            let userOrders = [];
            let targetUserId = currentUserId;
            
            // –ï—Å–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'unknown'
            if (!targetUserId || targetUserId === 'undefined' || targetUserId === 'null' || targetUserId === '') {
                targetUserId = 'unknown';
                console.log(`üîç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'unknown'`);
            }
            
            userOrders = data.filter(order => {
                const orderUserId = String(order.user_id || '');
                const targetUserIdStr = String(targetUserId || '');
                return orderUserId === targetUserIdStr;
            });
            console.log(`üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤: –Ω–∞–π–¥–µ–Ω–æ ${userOrders.length} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}`);
            

            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
            userOrders.forEach(order => {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                let userName;
                if (order.username) {
                    userName = `@${order.username}`;
                } else if (order.first_name) {
                    userName = order.first_name;
                } else {
                    userName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                }
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
                let statusText, statusClass;
                switch (order.status) {
                    case 'pending':
                        statusText = '–û–∂–∏–¥–∞–µ—Ç';
                        statusClass = 'status-pending';
                        break;
                    case 'active':
                        statusText = '–ê–∫—Ç–∏–≤–Ω—ã–π';
                        statusClass = 'status-active';
                        break;
                    case 'completed':
                        statusText = '–ó–∞–≤–µ—Ä—à–µ–Ω';
                        statusClass = 'status-completed';
                        break;
                    case 'cancelled':
                        statusText = '–û—Ç–º–µ–Ω–µ–Ω';
                        statusClass = 'status-cancelled';
                        break;
                    default:
                        statusText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                        statusClass = 'status-unknown';
                }
                
                const processedOrder = {
                    id: order.id,
                    user: userName,
                    service: order.service_name,
                    message: order.message,
                    status: statusText,
                    statusClass: statusClass,
                    date: new Date(order.timestamp).toLocaleDateString('ru-RU')
                };
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID
                const existingOrderIndex = globalOrders.findIndex(existingOrder => existingOrder.id === order.id);
                
                if (existingOrderIndex !== -1) {
                    // –ó–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                    const oldStatus = globalOrders[existingOrderIndex].status;
                    globalOrders[existingOrderIndex] = processedOrder;
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    if (oldStatus !== processedOrder.status) {
                        console.log(`üì¶ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${order.id}: ${oldStatus} ‚Üí ${processedOrder.status}`);
                    } else {
                        console.log(`üì¶ –û–±–Ω–æ–≤–ª–µ–Ω –∑–∞–∫–∞–∑ #${order.id}`);
                    }
                } else {
                    // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                    globalOrders.push(processedOrder);
                    console.log(`üì¶ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}`);
                }
            });
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            globalOrders.sort((a, b) => new Date(b.date) - new Date(a.date));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –∫—ç—à
            if (window.dataCache && window.dataCache.requests) {
                window.dataCache.requests.data = globalOrders;
                window.dataCache.requests.lastUpdate = Date.now();
                console.log(`üíæ –ó–∞–∫–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: ${globalOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑—ã –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            saveToCache('requests', globalOrders);
            
            updateOrdersDisplay();
            break;

        case 'chatMessages':
            globalChatMessages = data;
            updateChatDisplay();
            break;
        case 'stats':
            updateStatsDisplay(data);
            break;
        case 'averageRating':
            updateRatingDisplay(data);
            break;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateReviewsDisplay() {
    const reviewsContainer = document.querySelector('.reviews-container');
    if (reviewsContainer) {
        reviewsContainer.innerHTML = renderReviews();
        initReviewStars();
    }
}

function updateOrdersDisplay() {
    const ordersContainer = document.getElementById('ordersContainer');
    const ordersEmptyState = document.getElementById('ordersEmptyState');
    const ordersList = document.getElementById('ordersList');
    const ordersHeaderTitle = document.getElementById('ordersHeaderTitle');
    
    if (!ordersContainer || !ordersEmptyState || !ordersList || !ordersHeaderTitle) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤');
        return;
    }
    
    const orders = globalOrders || [];
    console.log('üîç updateOrdersDisplay:', {
        ordersLength: orders.length,
        globalOrders: globalOrders,
        ordersContainer: !!ordersContainer,
        ordersEmptyState: !!ordersEmptyState
    });
    
    if (orders.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        ordersEmptyState.style.display = 'block';
        ordersContainer.style.display = 'none';
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã
        ordersEmptyState.style.display = 'none';
        ordersContainer.style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–∫–∞–∑–æ–≤
        ordersHeaderTitle.textContent = `–ú–æ–∏ –∑–∞–∫–∞–∑—ã (${orders.length})`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        ordersList.innerHTML = renderOrders();
    }
}

function updateChatDisplay() {
    const chatContainer = document.querySelector('.chat-messages');
    if (chatContainer) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞
        renderChatMessages();
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }
}

function updateStatsDisplay(stats) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const statsElements = document.querySelectorAll('[data-stat]');
    statsElements.forEach(element => {
        const statKey = element.getAttribute('data-stat');
        if (stats[statKey] !== undefined) {
            element.textContent = stats[statKey];
        }
    });
}

function updateRatingDisplay(ratingData) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏
    const ratingElements = document.querySelectorAll('[data-rating]');
    ratingElements.forEach(element => {
        const ratingKey = element.getAttribute('data-rating');
        if (ratingData && ratingData[ratingKey] !== undefined) {
            element.textContent = ratingData[ratingKey];
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ" –≤ —á–∞—Ç–µ
function hideLoadMoreChatButton() {
    const button = document.getElementById('loadMoreChatBtn');
    if (button) {
        button.style.display = 'none';
    }
}

// ===== –§–£–ù–ö–¶–ò–ò "–ó–ê–ì–†–£–ó–ò–¢–¨ –ï–©–ï" =====

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
async function loadMoreReviews() {
    const button = document.getElementById('loadMoreReviews');
    if (button) {
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∑–∫–∞...';
    }
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã —Å –±—ç–∫–µ–Ω–¥–∞
        const result = await loadDataFromBackend('reviews', 1000);
        
        if (result.data.length > 0) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–∑—ã–≤—ã
            const allReviews = result.data.map(review => {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                let userName;
                if (review.username) {
                    userName = `@${review.username}`;
                } else if (review.first_name) {
                    userName = review.first_name;
                } else {
                    userName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                }
                
                return {
                    user: userName,
                    rating: review.rating,
                    comment: review.comment,
                    date: review.review_date || new Date(review.timestamp).toLocaleDateString('ru-RU')
                };
            });
            
            // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ –≤—Å–µ
            globalReviews = allReviews;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            updateReviewsDisplay();
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allReviews.length} –æ—Ç–∑—ã–≤–æ–≤`);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, —Ç–∞–∫ –∫–∞–∫ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –≤—Å–µ
            window.hasMoreReviews = false;
            updateReviewsDisplay();
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–∑—ã–≤–æ–≤:', error);
    } finally {
        if (button) {
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-history"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ –æ—Ç–∑—ã–≤—ã';
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
async function loadMoreChatMessages() {
    const button = document.getElementById('loadMoreChatBtn');
    button.disabled = true;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∑–∫–∞...';
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±—ç–∫–µ–Ω–¥–∞
        const result = await loadDataFromBackend('chatMessages', 1000);
        
        if (result.data.length > 0) {
            // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≤—Å–µ
            globalChatMessages = result.data;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            updateChatDisplay();
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${result.data.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, —Ç–∞–∫ –∫–∞–∫ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –≤—Å–µ
            window.hasMoreChatMessages = false;
            hideLoadMoreChatButton();
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    } finally {
        button.disabled = false;
        button.innerHTML = '<i class="fas fa-chevron-up"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
    }
}

// ===== –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê =====

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function cleanupOldData() {
    const now = Date.now();
    
    // –û—á–∏—Å—Ç–∫–∞ localStorage
    Object.keys(CACHE_KEYS).forEach(key => {
        try {
            const cached = localStorage.getItem(CACHE_KEYS[key]);
            if (cached) {
                const cacheData = JSON.parse(cached);
                const config = CACHE_CONFIG[key];
                const maxAge = config.keepInCache * 24 * 60 * 60 * 1000;
                
                if (now - cacheData.lastUpdate > maxAge) {
                    localStorage.removeItem(CACHE_KEYS[key]);
                    console.log(`üßπ –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à ${key}`);
                }
            }
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ ${key}:`, error);
        }
    });
    
    // –û—á–∏—Å—Ç–∫–∞ IndexedDB
    cleanupIndexedDB();
}

// –û—á–∏—Å—Ç–∫–∞ IndexedDB –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function cleanupIndexedDB() {
    try {
        const db = await initIndexedDB();
        const transaction = db.transaction(['chatMessages'], 'readwrite');
        const store = transaction.objectStore('chatMessages');
        const index = store.index('timestamp');
        
        const weekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;
        const range = IDBKeyRange.upperBound(weekAgo);
        
        await index.delete(range);
        console.log('üßπ –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ IndexedDB');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ IndexedDB:', error);
    }
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø =====

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function loadAllDataWithCache() {
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º...');
    
    await Promise.all([
        loadDataWithFallback('reviews'),
        loadDataWithFallback('requests'),
        loadDataWithFallback('chatMessages'),
        loadDataWithFallback('chat_orders'),
        loadDataWithFallback('stats'),
        loadDataWithFallback('averageRating')
    ]);
    
    console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    startPeriodicUpdates();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
    setInterval(cleanupOldData, 24 * 60 * 60 * 1000); // –†–∞–∑ –≤ –¥–µ–Ω—å
}

// Page Navigation
function showPage(pageId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (!pages || !mobileNavItems) {
        pages = document.querySelectorAll('.page');
        mobileNavItems = document.querySelectorAll('.mobile-nav-item');
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pages.forEach(page => {
        page.classList.remove('active');
        page.classList.remove('fade-out');
        page.style.display = 'none';
    });
    
    mobileNavItems.forEach(item => {
        item.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const targetPage = document.getElementById(pageId);
    
    if (targetPage) {
        targetPage.classList.add('active');
        targetPage.style.display = 'block';
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    let targetNavItem = null;
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü –∫ –∏–Ω–¥–µ–∫—Å–∞–º –∫–Ω–æ–ø–æ–∫
    const pageToNavIndex = {
        'home': 0,
        'services': 1,
        'contact': 2,
        'about': 3
    };
    
    const navIndex = pageToNavIndex[pageId];
    if (navIndex !== undefined) {
        targetNavItem = mobileNavItems[navIndex];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —ç–ª–µ–º–µ–Ω—Ç—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if (targetNavItem) {
        targetNavItem.classList.add('active');
    }
    
    // Enable scroll for all pages
    document.body.style.overflow = 'auto';
    document.body.classList.remove('page-home');
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–µ—Ä—Ö –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
    
            // Home page initialization
        if (pageId === 'home') {
            // Main button is always hidden
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–ª—å—Å–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            stopTagPulsing();
        } else {
        // Clear auto-switch interval when leaving home page
        if (typeof autoSwitchInterval !== 'undefined' && autoSwitchInterval) {
            clearInterval(autoSwitchInterval);
        }
        
        // Main button is always hidden
        
        // Auto-fill contact form with Telegram data
        if (pageId === 'contact' && userData) {
            const nameField = document.getElementById('name');
            if (nameField && !nameField.value) {
                nameField.value = `${userData.firstName} ${userData.lastName}`.trim();
            }
            // Initialize contact page animations
            setTimeout(initContactPage, 100);
            // Initialize tag pulsing animations
            setTimeout(initTagPulsing, 500);
        }
        

        
        // Initialize profile page animations
        if (pageId === 'about') {
            setTimeout(initProfilePage, 100);
        }
        
        // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
        if (pageId === 'reviews-page') {
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –∫—ç—à–∞
            setTimeout(() => {
                updateReviewsPage();
            }, 100);
        }
        
        // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (pageId === 'orders-page') {
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
            setTimeout(() => {
                updateOrdersDisplay();
            }, 500);
        }
        
        if (pageId === 'chat-page') {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            setTimeout(() => {
                loadChatOrdersFromDB(true);
                if (currentChat) {
                    loadChatMessages(currentChat);
                }
            }, 500);
        }
        
        // Initialize services page
        if (pageId === 'services') {
            console.log('Initializing services page');
            setTimeout(() => {
                console.log('Loading service cards...');
                loadServiceCards();
            }, 100);
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–ª—å—Å–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (pageId !== 'contact') {
            stopTagPulsing();
        }
    }
    
    // Scroll to top
    window.scrollTo({
        top: 0,
        behavior: 'auto'
    });
    
    // Handle responsive tags after page change
    setTimeout(handleResponsiveTags, 100);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞)
    if (typeof trackPageNavigation === 'function') {
        const previousPage = getCurrentPage();
        setTimeout(() => {
            trackPageNavigation(pageId, previousPage);
        }, 100);
    }
}

// Initialize first page
document.addEventListener('DOMContentLoaded', async function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º userData –¥–ª—è standalone —Ä–µ–∂–∏–º–∞ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    if (!window.userData && !window.tg) {
        // –í standalone —Ä–µ–∂–∏–º–µ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram Web App
        console.log('üîß DOMContentLoaded: standalone —Ä–µ–∂–∏–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    serviceModal = document.getElementById('serviceModal');
    modalContent = document.getElementById('modalContent');
    
    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.openServiceModal = openServiceModal;
    window.closeServiceModal = closeServiceModal;
    window.contactForService = contactForService;
    window.openOrderDetails = openOrderDetails;
    window.closeOrderModal = closeOrderModal;
    
    console.log('üîß –§—É–Ω–∫—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ window:', {
      openOrderDetails: typeof window.openOrderDetails,
      closeOrderModal: typeof window.closeOrderModal
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    await loadTexts();
    initApp();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã –±–ª–æ–∫–∞ –ø–æ–º–æ—â–∏
    loadHelpSectionTexts();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã –±–ª–æ–∫–∞ —Ç–µ–º—ã
    loadThemeSectionTexts();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—É
    initTheme();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç
    initCustomSelect();
    

    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    const errorReportForm = document.getElementById('errorReportForm');
    if (errorReportForm) {
        errorReportForm.addEventListener('submit', handleErrorReport);
    }
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥
    setTimeout(() => {
        console.log('Testing service cards loading...');
        loadServiceCards();
    }, 1000);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    setTimeout(async () => {
        console.log('Loading data from database with caching...');
        await loadAllDataWithCache();
    }, 1500);
    
    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', () => {
        stopPeriodicUpdates();
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    window.debugData = {
        forceUpdate: forceUpdateAllData,
        getCacheInfo: getCacheInfo,
        startUpdates: startPeriodicUpdates,
        stopUpdates: stopPeriodicUpdates
    };
    
    console.log('üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: window.debugData');
    console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ:', getCacheInfo());
    
    // –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
});

function createAppOverlay() {
    let overlay = document.getElementById('appOverlay');
    if (overlay) return overlay;
    overlay = document.createElement('div');
    overlay.id = 'appOverlay';
    overlay.innerHTML = `
        <div class="app-overlay-content">
            <div class="spinner"></div>
            <div id="appOverlayText">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...</div>
            <div id="appOverlayActions" style="margin-top:12px; display:none;"></div>
        </div>
    `;
    document.body.appendChild(overlay);
    return overlay;
}

function showAppOverlay(message) {
    const overlay = createAppOverlay();
    const text = overlay.querySelector('#appOverlayText');
    const actions = overlay.querySelector('#appOverlayActions');
    if (text) text.textContent = message || getText('systemNotifications.server.connecting', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
    if (actions) actions.style.display = 'none';
    overlay.style.display = 'flex';
}

function showAppError(message, onRetry) {
    const overlay = createAppOverlay();
    const text = overlay.querySelector('#appOverlayText');
    const actions = overlay.querySelector('#appOverlayActions');
    if (text) text.textContent = message || getText('systemNotifications.server.unavailable', '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    if (actions) {
        actions.innerHTML = '';
        const btn = document.createElement('button');
        btn.className = 'btn btn-primary';
        btn.textContent = getText('systemNotifications.server.retry', '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É');
        btn.onclick = () => onRetry && onRetry();
        actions.appendChild(btn);
        actions.style.display = '';
    }
    overlay.style.display = 'flex';
}

function hideAppOverlay() {
    const overlay = document.getElementById('appOverlay');
    if (overlay) overlay.style.display = 'none';
}

// Utility: hide any open modals (safety for fresh load or unexpected state)
function hideAllModals(){
  document.querySelectorAll('.modal').forEach(m=>{m.style.display='none';});
  document.body.style.overflow='auto';
}

async function initApp() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    pages = document.querySelectorAll('.page');
    mobileNavItems = document.querySelectorAll('.mobile-nav-item');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º userData –¥–ª—è standalone —Ä–µ–∂–∏–º–∞
    if (!window.userData && !window.tg) {
        console.log('üîß initApp: standalone —Ä–µ–∂–∏–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é showPage
    
    hideAllModals(); // ensure clean state on startup
    try {
        const mode = getLaunchMode?.() || 'unknown';
        const api = getBackendUrl?.() || '';
        console.log('Computed backend URL from ?api=', api || '(none)');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±—ç–∫–µ–Ω–¥ –∏ –º—ã –≤ query —Ä–µ–∂–∏–º–µ
        if (mode === 'query' && api) {
            showAppOverlay('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
            const startTs = Date.now();
            const minDurationMs = 1500; // keep overlay for at least ~1.5s
            
            const ready = await waitForBackendReady(api, 20000);
            if (!ready) {
                showAppError('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', async () => {
                    showAppOverlay('–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
                    const ok = await waitForBackendReady(api, 20000);
                    if (ok) {
                        hideAppOverlay();
                        showPage('home');
                    } else {
                        showAppError('–°–µ—Ä–≤–µ—Ä –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                    }
                });
                return;
            }
            
            const elapsed = Date.now() - startTs;
            if (elapsed < minDurationMs) {
                await new Promise(r => setTimeout(r, minDurationMs - elapsed));
            }
            hideAppOverlay();
        }
        
        // Proceed to initial page
        showPage('home');
        
        // Handle responsive tags after page is shown
        setTimeout(handleResponsiveTags, 100);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    } catch (e) {
        console.error('initApp failed', e);
        hideAppOverlay();
        showPage('home');
    }
}

// Inject styles for overlay
(function injectOverlayStyles(){
    const s = document.createElement('style');
    s.textContent = `
    #appOverlay { position: fixed; inset: 0; background: rgba(0,0,0,0.5); display: none; align-items: center; justify-content: center; z-index: 99999; }
    #appOverlay .app-overlay-content { background: var(--bg-primary); color: var(--text-primary); padding: 20px 24px; border-radius: 12px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); min-width: 260px; text-align: center; }
    #appOverlay .spinner { width: 28px; height: 28px; border: 3px solid var(--border-color); border-top-color: var(--primary-color, #2563eb); border-radius: 50%; margin: 0 auto 12px auto; animation: spin .8s linear infinite; }
    @keyframes spin { to { transform: rotate(360deg); } }
    `;
    document.head.appendChild(s);
})();

// Service Categories Filtering
function initServiceCategories() {
    console.log('initServiceCategories called');
    const categoryTabs = document.querySelectorAll('.category-tab');
    const serviceCards = document.querySelectorAll('.service-compact-card');
    
    console.log('categoryTabs found:', categoryTabs.length);
    console.log('serviceCards found:', serviceCards.length);
    
    if (serviceCards.length === 0) {
        console.error('No service cards found! Categories will not work.');
        return;
    }
    
    categoryTabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const category = tab.getAttribute('data-category');
            console.log('Category clicked:', category);
            
            // Update active tab
            categoryTabs.forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            
            // Filter services
            let visibleCount = 0;
            serviceCards.forEach(card => {
                const cardCategory = card.getAttribute('data-category');
                console.log(`Card category: ${cardCategory}, filter: ${category}`);
                
                if (category === 'all' || cardCategory === category) {
                    card.style.display = 'block';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                    visibleCount++;
                } else {
                    card.style.opacity = '0';
                    card.style.transform = 'translateY(10px)';
                    setTimeout(() => {
                        card.style.display = 'none';
                    }, 200);
                }
            });
            
            console.log(`Filtered to ${visibleCount} visible cards`);
        });
    });
    
    console.log('Service categories initialized successfully');
}

// Show contact form with scroll to form
function showContactForm() {
    showPage('feedback-page');
}

// Load service cards from JSON
function loadServiceCards() {
    console.log('loadServiceCards called');
    const servicesGrid = document.querySelector('.services-compact-grid');
    if (!servicesGrid) {
        console.error('services-compact-grid not found');
        return;
    }
    console.log('servicesGrid found:', servicesGrid);
    
    // Get services data from JSON
    const servicesData = {
        'aiTelegram': {
            title: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –¥–ª—è Telegram',
            description: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏',
            price: '–æ—Ç 50,000‚ÇΩ',
            button: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'
        },
        'channelAutomation': {
            title: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤',
            description: '–°–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è Telegram-–∫–∞–Ω–∞–ª–æ–≤',
            price: '–æ—Ç 75,000‚ÇΩ',
            button: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'
        },
        'onboardingSystems': {
            title: '–°–∏—Å—Ç–µ–º—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞',
            description: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            price: '–æ—Ç 60,000‚ÇΩ',
            button: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'
        },
        'socialManagement': {
            title: '–í–µ–¥–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤',
            description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö',
            price: '–æ—Ç 60,000‚ÇΩ/–º–µ—Å',
            button: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'
        },
        'productSupport': {
            title: '–ü—Ä–æ–¥—É–∫—Ç–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
            description: '–í–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ "–ø–æ–¥ –∫–ª—é—á" –æ—Ç –∏–¥–µ–∏ –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
            price: '–æ—Ç 150,000‚ÇΩ/–º–µ—Å',
            button: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'
        },
        'noCodeWebsites': {
            title: '–°–∞–π—Ç—ã –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            description: 'No-code —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å vibe-coding –ø–æ–¥—Ö–æ–¥–æ–º',
            price: '–æ—Ç 40,000‚ÇΩ',
            button: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'
        },
        'customDevelopment': {
            title: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
            description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–¥ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏',
            price: '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è',
            button: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'
        },
        'telegramBots': {
            title: '–°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–æ–≤',
            description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
            price: '–æ—Ç 35,000‚ÇΩ',
            button: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'
        },
        'projectManager': {
            title: '–ü—Ä–æ–µ–∫—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
            description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –¥–æ —Ñ–∏–Ω–∏—à–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Å—Ä–æ–∫–∞—Ö, –±—é–¥–∂–µ—Ç–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ',
            price: '–æ—Ç 150,000‚ÇΩ/–º–µ—Å',
            button: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'
        }
    };
    
    const serviceCards = [
        { id: 'ai-telegram', category: 'ai', icon: 'fas fa-robot', dataKey: 'aiTelegram' },
        { id: 'channel-automation', category: 'ai', icon: 'fas fa-broadcast-tower', dataKey: 'channelAutomation' },
        { id: 'onboarding-systems', category: 'ai', icon: 'fas fa-user-graduate', dataKey: 'onboardingSystems' },
        { id: 'social-management', category: 'social', icon: 'fas fa-users', dataKey: 'socialManagement' },
        { id: 'product-support', category: 'professions', icon: 'fas fa-project-diagram', dataKey: 'productSupport' },
        { id: 'project-manager', category: 'professions', icon: 'fas fa-tasks', dataKey: 'projectManager' },
        { id: 'no-code-websites', category: 'development', icon: 'fas fa-code', dataKey: 'noCodeWebsites' },
        { id: 'telegram-bots', category: 'development', icon: 'fas fa-paper-plane', dataKey: 'telegramBots' },
        { id: 'custom-development', category: 'development', icon: 'fas fa-cogs', dataKey: 'customDevelopment' }
    ];
    
    console.log('servicesData:', servicesData);
    console.log('serviceCards:', serviceCards);
    
    const htmlContent = serviceCards.map(service => {
        const serviceData = servicesData[service.dataKey];
        console.log(`Service ${service.dataKey}:`, serviceData);
        if (!serviceData) {
            console.error(`No data found for service: ${service.dataKey}`);
            return '';
        }
        
        return `
            <div class="service-compact-card" data-category="${service.category}" onclick="openServiceModal('${service.id}')">
                <div class="service-compact-header">
                    <div class="service-compact-icon">
                        <i class="${service.icon}"></i>
                    </div>
                    <div class="service-compact-info">
                        <div class="service-compact-title-row">
                            <h3>${serviceData.title}</h3>
                        </div>
                        <p>${serviceData.description}</p>
                    </div>
                </div>
                <div class="service-compact-actions">
                    <button class="btn btn-primary btn-sm" onclick="event.stopPropagation(); openServiceModal('${service.id}')">
                        <i class="fas fa-info-circle"></i>
                        <span>${serviceData.button}</span>
                    </button>
                    <div class="service-compact-price-new">
                        <span>${serviceData.price}</span>
                    </div>
                </div>
            </div>
        `;
    }).join('');
    
    console.log('Generated HTML:', htmlContent);
    servicesGrid.innerHTML = htmlContent;
    console.log('Services grid innerHTML set');
    
    // Initialize categories after cards are loaded
    setTimeout(() => {
        initServiceCategories();
    }, 100);
}

// Get modal data from static object
function getModalData(serviceKey) {
    const modalData = {
        'aiTelegram': {
            title: 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –¥–ª—è Telegram',
            description: '–°–æ–∑–¥–∞—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –≤ Telegram. –û—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.',
            features: [
                '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
                '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤',
                '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM –∏ –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏',
                '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã',
                '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤',
                '24/7 –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'
            ],
            technologies: ['OpenAI GPT', 'Telegram Bot API', 'Python', 'Node.js'],
            price: '–æ—Ç 50,000‚ÇΩ',
            duration: '2-3 –Ω–µ–¥–µ–ª–∏'
        },
        'channelAutomation': {
            title: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤',
            description: '–°–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è Telegram-–∫–∞–Ω–∞–ª–æ–≤ —Å —É–º–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.',
            features: [
                '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                '–£–º–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
                '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',
                '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏',
                '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π',
                '–û—Ç—á–µ—Ç—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
            ],
            technologies: ['Telegram API', 'Python', '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
            price: '–æ—Ç 75,000‚ÇΩ',
            duration: '3-4 –Ω–µ–¥–µ–ª–∏'
        },
        'onboardingSystems': {
            title: '–°–∏—Å—Ç–µ–º—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞',
            description: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.',
            features: [
                '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
                '–ü—Ä–æ–≥—Ä–µ—Å—Å-—Ç—Ä–µ–∫–∏–Ω–≥',
                '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
                '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫–∞',
                '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è',
                '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å HR-—Å–∏—Å—Ç–µ–º–∞–º–∏'
            ],
            technologies: ['LMS', 'API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'],
            price: '–æ—Ç 60,000‚ÇΩ',
            duration: '4-6 –Ω–µ–¥–µ–ª—å'
        },
        'socialManagement': {
            title: '–í–µ–¥–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤',
            description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.',
            features: [
                '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á',
                '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å',
                '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π',
                '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM',
                'A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
            ],
            technologies: ['–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ API', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'CRM'],
            price: '–æ—Ç 60,000‚ÇΩ/–º–µ—Å',
            duration: '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ'
        },
        'productSupport': {
            title: '–ü—Ä–æ–¥—É–∫—Ç–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
            description: '–í–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ "–ø–æ–¥ –∫–ª—é—á" –æ—Ç –∏–¥–µ–∏ –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.',
            features: [
                '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π',
                '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
                '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å—Ä–æ–∫–æ–≤',
                'UX/UI –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
                '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞'
            ],
            technologies: ['Agile', 'Scrum', 'Jira', 'Figma', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
            price: '–æ—Ç 150,000‚ÇΩ/–º–µ—Å',
            duration: '–ü–æ –ø—Ä–æ–µ–∫—Ç—É'
        },
        'projectManager': {
            title: '–ü—Ä–æ–µ–∫—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
            description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –≤ —Ä–∞–º–∫–∞—Ö –±—é–¥–∂–µ—Ç–∞ –∏ —Å—Ä–æ–∫–æ–≤.',
            features: [
                '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Å—Ä–æ–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞',
                '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–º –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏',
                '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤',
                '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
                '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏',
                '–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º'
            ],
            technologies: ['Agile', 'Scrum', 'Kanban', 'Jira', 'Trello', 'Notion'],
            price: '–æ—Ç 150,000‚ÇΩ/–º–µ—Å',
            duration: '–ü–æ –ø—Ä–æ–µ–∫—Ç—É'
        },
        'noCodeWebsites': {
            title: '–°–∞–π—Ç—ã –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            description: 'No-code —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å vibe-coding –ø–æ–¥—Ö–æ–¥–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-—Ä–µ—à–µ–Ω–∏–π.',
            features: [
                '–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤ –∏ —Å–∞–π—Ç–æ–≤',
                '–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∫–æ–¥–∞',
                '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏',
                '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω',
                'SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
                '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
            ],
            technologies: ['Webflow', 'Bubble', 'Zapier', 'Airtable', 'API'],
            price: '–æ—Ç 40,000‚ÇΩ',
            duration: '1-2 –Ω–µ–¥–µ–ª–∏'
        },
        'telegramBots': {
            title: '–°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–æ–≤',
            description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö Telegram –±–æ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤.',
            features: [
                '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤ –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏',
                '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API',
                '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
                '–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π',
                '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã',
                '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏'
            ],
            technologies: ['Telegram Bot API', 'Python', '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'],
            price: '–æ—Ç 35,000‚ÇΩ',
            duration: '2-4 –Ω–µ–¥–µ–ª–∏'
        },
        'customDevelopment': {
            title: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
            description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–¥ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.',
            features: [
                '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π',
                '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏',
                '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
                '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ',
                '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ'
            ],
            technologies: ['Python', 'JavaScript', 'API', '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', '–û–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã'],
            price: '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è',
            duration: '–ü–æ –ø—Ä–æ–µ–∫—Ç—É'
        }
    };
    
    return modalData[serviceKey];
}

// Service Modal Functionality
function openServiceModal(serviceType) {
    console.log('openServiceModal called with:', serviceType);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!serviceModal) {
        serviceModal = document.getElementById('serviceModal');
    if (!serviceModal) {
        console.error('serviceModal element not found');
        return;
        }
    }
    
    if (!modalContent) {
        modalContent = document.getElementById('modalContent');
    if (!modalContent) {
        console.error('modalContent element not found');
        return;
        }
    }
    
    // Map service IDs to JSON keys
    const serviceIdToKey = {
        'ai-telegram': 'aiTelegram',
        'channel-automation': 'channelAutomation',
        'social-management': 'socialManagement',
        'product-support': 'productSupport',
        'project-manager': 'projectManager',
        'custom-development': 'customDevelopment',
        'no-code-websites': 'noCodeWebsites',
        'onboarding-systems': 'onboardingSystems',
        'telegram-bots': 'telegramBots'
    };
    
    const serviceKey = serviceIdToKey[serviceType];
    console.log('serviceKey:', serviceKey);
    if (!serviceKey) {
        console.error('No serviceKey found for:', serviceType);
        return;
    }
    
    // Get data from static object
    const modalData = getModalData(serviceKey);
    console.log('modalData:', modalData);
    if (!modalData) {
        console.error('No modalData found for key:', serviceKey);
        return;
    }
    
    if (modalData) {
        try {
        modalContent.innerHTML = `
          <div class="service-modal">
            <h2 class="service-title">${modalData.title}</h2>
            <p class="service-description">${modalData.description}</p>

            <div class="service-details">
              <div class="detail-item">
                <h4>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</h4>
                <div class="tech-tags">
                  ${modalData.technologies.map(t=>`<span>${t}</span>`).join('')}
                </div>
              </div>

              <div class="detail-item">
                <h4>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —É—Å–ª—É–≥—É:</h4>
                <ul class="feature-list">
                  ${modalData.features.map(f=>`<li>${f}</li>`).join('')}
                </ul>
              </div>
            </div>

            <div class="service-pricing">
              <div class="info-pill"><i class="fas fa-tag"></i><span>${modalData.price}</span></div>
              <div class="info-pill"><i class="fas fa-clock"></i><span>${modalData.duration}</span></div>
            </div>

            <div class="modal-actions">
              <button class="btn btn-primary" onclick="contactForService('${modalData.title}')"><i class="fas fa-paper-plane"></i><span>–ó–∞–∫–∞–∑–∞—Ç—å</span></button>
            </div>

            <div class="service-reviews">
              ${renderReviews()}
            </div>
          </div>`;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤–µ–∑–¥–æ—á–µ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        initReviewStars();
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–£—Å–ª—É–≥–∏" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        const serviceNavItem = document.querySelector('#serviceTopNav .mobile-nav-item:nth-child(2)');
        if (serviceNavItem) {
            serviceNavItem.classList.add('active');
        }
        
        console.log('Opening modal...');
        serviceModal.style.display = 'block';
        document.body.style.overflow = 'hidden';
        console.log('Modal opened successfully');
        } catch (error) {
            console.error('Error opening modal:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: ' + error.message);
        }
    } else {
        console.error('modalData is falsy');
    }
}

// Close modal
closeModal.addEventListener('click', closeServiceModal);
window.addEventListener('click', (e) => {
    if (e.target === serviceModal) {
        closeServiceModal();
    }
});

function closeServiceModal() {
    if (serviceModal) {
    serviceModal.style.display = 'none';
    document.body.style.overflow = 'auto';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–µ–∑–¥–æ—á–µ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
function initReviewStars() {
    try {
    const starSelect = document.getElementById('starSelect');
    const reviewText = document.getElementById('reviewText');
    const sendBtn = document.getElementById('sendReviewBtn');
    
    if (!starSelect || !reviewText || !sendBtn) return;
    
    const stars = starSelect.querySelectorAll('i');
    let selectedRating = 0;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–Ω–∞ –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
    reviewText.style.display = 'none';
    sendBtn.disabled = true;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–≤–µ–∑–¥–æ—á–µ–∫
    stars.forEach((star, index) => {
        star.addEventListener('click', () => {
            selectedRating = index + 1;
            
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã
            stars.forEach((s, i) => {
                if (i < selectedRating) {
                    s.classList.add('active');
                } else {
                    s.classList.remove('active');
                }
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            reviewText.style.display = 'block';
            reviewText.focus();
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–≤–µ–∑–¥—ã
            sendBtn.disabled = false;
        });
    });
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—Å—Ç–∞ - –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–≤–µ–∑–¥—ã
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
    sendBtn.addEventListener('click', () => {
        const currentUserData = window.userData || userData;
        console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞, userData:', currentUserData);
        
        const reviewData = {
            rating: selectedRating,
            comment: reviewText.value.trim() || getText('servicesPage.reviews.messages.noComment', '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'),
            user: currentUserData ? `@${currentUserData.username || currentUserData.firstName}` : '@–≥–æ—Å—Ç—å',
            date: new Date().toLocaleDateString('ru-RU').split('/').reverse().join('.')
        };
        
        console.log('üìù –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞:', reviewData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±—ç–∫–µ–Ω–¥
        trackImportantEvent('review_submit', {
            rating: selectedRating,
            comment: reviewData.comment,
            user: reviewData.user,
            date: reviewData.date
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –æ–±—â—É—é –±–∞–∑—É
        globalReviews.unshift(reviewData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
        const reviewsContainer = document.querySelector('.service-reviews');
        if (reviewsContainer) {
            reviewsContainer.innerHTML = renderReviews();
            // –†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ HTML
            setTimeout(() => initReviewStars(), 100);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        showNotification(getText('servicesPage.reviews.messages.success', '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!'), 'success');
    });
    } catch (error) {
        console.error('Error in initReviewStars:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
function initProfileHelp() {
    const helpBtn = document.getElementById('profileHelpBtn');
    if (!helpBtn) {
        console.log('–ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    helpBtn.replaceWith(helpBtn.cloneNode(true));
    const newHelpBtn = document.getElementById('profileHelpBtn');
    
    newHelpBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        console.log('–ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ –Ω–∞–∂–∞—Ç–∞');
        
        if (!currentUserData) {
            showNotification('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'info');
            return;
        }
        
        const username = currentUserData.username ? `@${currentUserData.username}` : getText('profilePage.userInfo.defaults.username', '–ù–µ —É–∫–∞–∑–∞–Ω');
        const userId = currentUserData.id || '‚Äî';
        
        const modalContent = `
            <div class="user-info-modal">
                <div class="user-info-header">
                    <h3>${getText('profilePage.userInfo.modal.title', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ')}</h3>
                    <button class="modal-close-btn" onclick="closeUserInfoModal()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="user-info-content">
                    <div class="user-info-item">
                        <span class="user-info-label">${getText('profilePage.userInfo.fields.username', 'Username')}:</span>
                        <span class="user-info-value">${username}</span>
                    </div>
                    <div class="user-info-item">
                        <span class="user-info-label">${getText('profilePage.userInfo.fields.userId', 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')}:</span>
                        <span class="user-info-value">${userId}</span>
                    </div>
                </div>
            </div>
        `;
        
        showUserInfoModal(modalContent);
    });
    
    console.log('–ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}





// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—É–ª—å—Å–∞—Ü–∏–π
let tagPulseInterval = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—É–ª—å—Å–∞—Ü–∏–π —Ç–µ–≥–æ–≤
function initTagPulsing() {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (tagPulseInterval) {
        clearInterval(tagPulseInterval);
        tagPulseInterval = null;
    }
    
    const tagItems = document.querySelectorAll('.tag-item');
    if (tagItems.length === 0) return;
    
    function pulseRandomTag() {
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–ª–∞—Å—Å pulse —Å–æ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
        tagItems.forEach(tag => tag.classList.remove('pulse'));
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–≥
        const randomIndex = Math.floor(Math.random() * tagItems.length);
        const randomTag = tagItems[randomIndex];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å pulse –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        randomTag.classList.add('pulse');
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            randomTag.classList.remove('pulse');
        }, 600);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª—å—Å–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    tagPulseInterval = setInterval(pulseRandomTag, 3000);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—É–ª—å—Å–∞—Ü–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(pulseRandomTag, 2000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—É–ª—å—Å–∞—Ü–∏–π
function stopTagPulsing() {
    if (tagPulseInterval) {
        clearInterval(tagPulseInterval);
        tagPulseInterval = null;
    }
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã pulse
    document.querySelectorAll('.tag-item').forEach(tag => tag.classList.remove('pulse'));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è FAQ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
function toggleFaq(element) {
    const faqItem = element.parentElement;
    const isActive = faqItem.classList.contains('active');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ FAQ
    document.querySelectorAll('.faq-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π FAQ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç
    if (!isActive) {
        faqItem.classList.add('active');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
function handleErrorReport(event) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    const errorType = formData.get('errorType');
    const errorDescription = formData.get('errorDescription');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ
    trackImportantEvent('error_report', {
        type: errorType,
        description: errorDescription,
        userAgent: navigator.userAgent,
        timestamp: new Date().toISOString()
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(getText('helpSection.errorReport.successMessage', '–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ú—ã –∏—Å–ø—Ä–∞–≤–∏–º –ø—Ä–æ–±–ª–µ–º—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'), 'success');
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    form.reset();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –±–ª–æ–∫–∞ –ø–æ–º–æ—â–∏
function loadHelpSectionTexts() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const helpTitle = document.getElementById('helpTitle');
    if (helpTitle) {
        helpTitle.textContent = getText('helpSection.title', '–ü–æ–º–æ—â—å');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º FAQ
    const faqElements = {
        'faqContactQuestion': 'helpSection.faq.contactSupport.question',
        'faqContactAnswer': 'helpSection.faq.contactSupport.answer',
        'faqErrorQuestion': 'helpSection.faq.reportError.question',
        'faqErrorAnswer': 'helpSection.faq.reportError.answer',
        'faqOrderQuestion': 'helpSection.faq.orderService.question',
        'faqOrderAnswer': 'helpSection.faq.orderService.answer',
        'faqTimeQuestion': 'helpSection.faq.developmentTime.question',
        'faqTimeAnswer': 'helpSection.faq.developmentTime.answer',
        'faqWarrantyQuestion': 'helpSection.faq.warranty.question',
        'faqWarrantyAnswer': 'helpSection.faq.warranty.answer'
    };
    
    Object.entries(faqElements).forEach(([elementId, textPath]) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = getText(textPath, element.textContent);
        }
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    const errorElements = {
        'errorReportTitle': 'helpSection.errorReport.title',
        'errorTypeLabel': 'helpSection.errorReport.typeLabel',
        'errorDescriptionLabel': 'helpSection.errorReport.descriptionLabel',
        'errorDescriptionPlaceholder': 'helpSection.errorReport.descriptionPlaceholder',
        'errorSubmitButton': 'helpSection.errorReport.submitButton'
    };
    
    Object.entries(errorElements).forEach(([elementId, textPath]) => {
        const element = document.getElementById(elementId);
        if (element) {
            if (element.tagName === 'TEXTAREA') {
                element.placeholder = getText(textPath, element.placeholder);
            } else {
                element.textContent = getText(textPath, element.textContent);
            }
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–∞
    const selectValue = document.getElementById('selectValue');
    if (selectValue) {
        selectValue.textContent = getText('helpSection.errorReport.typePlaceholder', '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø');
        selectValue.classList.add('placeholder');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ —Å–µ–ª–µ–∫—Ç–∞
    const selectOptions = document.querySelectorAll('.select-option');
    const optionTexts = {
        0: 'helpSection.errorReport.typePlaceholder',
        1: 'helpSection.errorReport.types.bug',
        2: 'helpSection.errorReport.types.ui',
        3: 'helpSection.errorReport.types.performance',
        4: 'helpSection.errorReport.types.other'
    };
    
    selectOptions.forEach((option, index) => {
        const textPath = optionTexts[index];
        if (textPath) {
            const text = getText(textPath, option.textContent);
            option.textContent = text;
            option.dataset.text = text;
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –±–ª–æ–∫–∞ —Ç–µ–º—ã
function loadThemeSectionTexts() {
    const themeElements = {
        'themeTitle': 'themeSection.title',
        'themeLightTitle': 'themeSection.light.title',
        'themeLightDescription': 'themeSection.light.description',
        'themeDarkTitle': 'themeSection.dark.title',
        'themeDarkDescription': 'themeSection.dark.description',
        'themeAutoTitle': 'themeSection.auto.title',
        'themeAutoDescription': 'themeSection.auto.description'
    };
    
    Object.entries(themeElements).forEach(([elementId, textPath]) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = getText(textPath, element.textContent);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –±–ª–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–æ—Ñ–∏–ª—è
function loadProfileActionsTexts() {
    const profileActionElements = {
        'profileActionsTitle': 'profilePage.profileActions.title',
        'profileActionHelp': 'profilePage.profileActions.buttons.help',
        'profileActionFeedback': 'profilePage.profileActions.buttons.feedback',
        'profileActionOrders': 'profilePage.profileActions.buttons.orders',
        'profileActionChat': 'profilePage.profileActions.buttons.chat',
        'profileActionReviews': 'profilePage.profileActions.buttons.reviews'
    };
    
    Object.entries(profileActionElements).forEach(([elementId, textPath]) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = getText(textPath, element.textContent);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–º–æ—â–∏
function loadHelpPageTexts() {
    const helpPageElements = {
        'helpPageTitle': 'helpPage.title'
    };
    
    Object.entries(helpPageElements).forEach(([elementId, textPath]) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = getText(textPath, element.textContent);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
function loadFeedbackPageTexts() {
    const feedbackPageElements = {
        'feedbackPageTitle': 'feedbackPage.title',
        'feedbackFormTitle': 'feedbackPage.form.title',
        'feedbackNameLabel': 'feedbackPage.form.nameLabel',
        'feedbackNamePlaceholder': 'feedbackPage.form.namePlaceholder',
        'feedbackSubjectLabel': 'feedbackPage.form.subjectLabel',
        'feedbackSubjectPlaceholder': 'feedbackPage.form.subjectPlaceholder',
        'feedbackMessageLabel': 'feedbackPage.form.messageLabel',
        'feedbackMessagePlaceholder': 'feedbackPage.form.messagePlaceholder',
        'feedbackSubmitButton': 'feedbackPage.form.submitButton'
    };
    
    Object.entries(feedbackPageElements).forEach(([elementId, textPath]) => {
        const element = document.getElementById(elementId);
        if (element) {
            if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                element.placeholder = getText(textPath, element.placeholder);
            } else {
                element.textContent = getText(textPath, element.textContent);
            }
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
function loadOrdersPageTexts() {
    const ordersPageElements = {
        'ordersPageTitle': 'ordersPage.title',
        'ordersEmptyTitle': 'ordersPage.emptyState.title',
        'ordersEmptyDescription': 'ordersPage.emptyState.description',
        'ordersEmptyButton': 'ordersPage.emptyState.button'
    };
    
    Object.entries(ordersPageElements).forEach(([elementId, textPath]) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = getText(textPath, element.textContent);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–∞—Ç–∞
function loadChatPageTexts() {
    console.log('loadChatPageTexts called');
    
    const chatPageElements = {
        'chatPageTitle': 'chatPage.title',
        'chatContactName': 'chatPage.contact.name',
        'chatContactTitle': 'chatPage.contact.title',
        'chatContactStatus': 'chatPage.contact.status',
        'chatTelegramButton': 'chatPage.buttons.telegram',
        'chatCopyLinkButton': 'chatPage.buttons.copyLink',
        'chatFeaturesTitle': 'chatPage.features.title',
        'chatFeature1': 'chatPage.features.consultation',
        'chatFeature2': 'chatPage.features.support',
        'chatFeature3': 'chatPage.features.requirements',
        'chatFeature4': 'chatPage.features.updates'
    };
    
    Object.entries(chatPageElements).forEach(([elementId, textPath]) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = getText(textPath, element.textContent);
        }
    });
    
    console.log('About to call updateChatInputArea');
    // Update input area for current chat
    updateChatInputArea(currentChat);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏ –∑–∞–∫–∞–∑–æ–≤
    loadOrderTags();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤
function loadReviewsPageTexts() {
    const reviewsPageElements = {
        'reviewsPageTitle': 'reviewsPage.title',
        'reviewsHeaderTitle': 'reviewsPage.header.title',
        'reviewsHeaderDescription': 'reviewsPage.header.description',
        'reviewsAddButton': 'reviewsPage.addButton'
    };
    
    Object.entries(reviewsPageElements).forEach(([elementId, textPath]) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = getText(textPath, element.textContent);
        }
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã
    loadReviewsForPage();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤
function loadReviewsForPage() {
    const reviewsContainer = document.getElementById('reviewsContainer');
    if (!reviewsContainer) return;
    
    const reviews = globalReviews;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –∏–∑ –ë–î, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    let avg = "-";
    let totalReviews = reviews.length;
    let lastUpdated = null;
    
    if (window.averageRating && window.averageRating.rating > 0) {
        avg = window.averageRating.rating.toFixed(1);
        totalReviews = window.averageRating.totalReviews;
        lastUpdated = window.averageRating.lastUpdated;
    } else if (reviews.length > 0) {
        // Fallback: –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        avg = (reviews.reduce((s, r) => s + r.rating, 0) / reviews.length).toFixed(1);
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
    const reviewsHtml = reviews.map(review => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —é–∑–µ—Ä–Ω–µ–π–º
        const hasUsername = review.user.startsWith('@');
        
        return `
            <div class="review-card">
                <div class="review-header">
                    <div class="review-avatar">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="review-info">
                        <h4 data-has-username="${hasUsername}">${review.user}</h4>
                        <div class="review-stars">
                            ${'<i class="fas fa-star"></i>'.repeat(review.rating)}${'<i class="far fa-star"></i>'.repeat(5 - review.rating)}
                        </div>
                    </div>
                </div>
                <p class="review-text">${review.comment}</p>
                <div class="review-date">${review.date}</div>
            </div>
        `;
    }).join('');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ—Ç–∑—ã–≤—ã
    reviewsContainer.innerHTML = `
        <div class="reviews-summary">
            <div class="reviews-stats">
                <div class="avg-rating">
                    <span class="avg-number">${avg}</span>
                    <div class="avg-stars">
                        ${'<i class="fas fa-star"></i>'.repeat(Math.round(avg))}${'<i class="far fa-star"></i>'.repeat(5 - Math.round(avg))}
                    </div>
                    <span class="reviews-count">(${totalReviews} –æ—Ç–∑—ã–≤–æ–≤)</span>
                </div>
            </div>
        </div>
        <div class="reviews-grid">
            ${reviewsHtml}
        </div>
    `;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏
let currentTheme = 'auto';

function selectTheme(theme, showNotification = true) {
    currentTheme = theme;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('appTheme', theme);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    applyTheme(theme);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if (showNotification) {
        const themeNames = {
            'light': '—Å–≤–µ—Ç–ª–∞—è',
            'dark': '—Ç—ë–º–Ω–∞—è'
        };
        showNotification(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${themeNames[theme]}`, 'success');
    }
}

function applyTheme(theme) {
    const root = document.documentElement;
    
    if (theme === 'dark') {
        // –¢—ë–º–Ω–∞—è —Ç–µ–º–∞
        root.setAttribute('data-theme', 'dark');
        root.style.setProperty('--bg-primary', '#1a1a1a');
        root.style.setProperty('--bg-secondary', '#2d2d2d');
        root.style.setProperty('--bg-accent', '#3a3a3a');
        root.style.setProperty('--text-primary', '#ffffff');
        root.style.setProperty('--text-secondary', '#b0b0b0');
        root.style.setProperty('--text-light', '#808080');
        root.style.setProperty('--border-color', '#404040');
        root.style.setProperty('--shadow', '0 4px 12px rgba(0, 0, 0, 0.3)');
        root.style.setProperty('--shadow-md', '0 8px 24px rgba(0, 0, 0, 0.4)');
        root.style.setProperty('--shadow-sm', '0 1px 2px 0 rgba(0, 0, 0, 0.3)');
        root.style.setProperty('--shadow-lg', '0 10px 15px -3px rgba(0, 0, 0, 0.3)');
        root.style.setProperty('--shadow-xl', '0 20px 25px -5px rgba(0, 0, 0, 0.3)');
    } else if (theme === 'light') {
        // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
        root.setAttribute('data-theme', 'light');
        root.style.setProperty('--bg-primary', '#ffffff');
        root.style.setProperty('--bg-secondary', '#f8f9fa');
        root.style.setProperty('--bg-accent', '#f3f4f6');
        root.style.setProperty('--text-primary', '#1f2937');
        root.style.setProperty('--text-secondary', '#6b7280');
        root.style.setProperty('--text-light', '#9ca3af');
        root.style.setProperty('--border-color', '#e5e7eb');
        root.style.setProperty('--shadow', '0 4px 12px rgba(0, 0, 0, 0.1)');
        root.style.setProperty('--shadow-md', '0 8px 24px rgba(0, 0, 0, 0.15)');
        root.style.setProperty('--shadow-sm', '0 1px 2px 0 rgba(0, 0, 0, 0.05)');
        root.style.setProperty('--shadow-lg', '0 10px 15px -3px rgba(0, 0, 0, 0.1)');
        root.style.setProperty('--shadow-xl', '0 20px 25px -5px rgba(0, 0, 0, 0.1)');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ç–µ–º—ã
    updateThemeButtons();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Ç–µ–º—ã
function updateThemeButtons() {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ç–µ–º—É –∏–∑ localStorage
    const savedTheme = localStorage.getItem('appTheme') || 'light';
    
    console.log('üîç updateThemeButtons: savedTheme =', savedTheme);
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    const allOptions = document.querySelectorAll('.theme-option');
    console.log('üîç Found theme options:', allOptions.length);
    
    allOptions.forEach(option => {
        const theme = option.getAttribute('data-theme');
        option.classList.remove('active');
        console.log('üîç Removed active from:', theme);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –∫–Ω–æ–ø–∫–µ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Ç–µ–º–æ–π
    const activeOption = document.querySelector(`[data-theme="${savedTheme}"]`);
    if (activeOption) {
        activeOption.classList.add('active');
        console.log('‚úÖ Activated button for saved theme:', savedTheme);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
        setTimeout(() => {
            const isActive = activeOption.classList.contains('active');
            console.log('üîç Button active check:', savedTheme, '=', isActive);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
            const computedStyle = window.getComputedStyle(activeOption);
            console.log('üîç Computed background:', computedStyle.background);
            console.log('üîç Computed border-color:', computedStyle.borderColor);
            console.log('üîç Computed color:', computedStyle.color);
        }, 100);
    } else {
        console.log('‚ùå Button not found for saved theme:', savedTheme);
        console.log('üîç Available buttons:');
        allOptions.forEach(option => {
            console.log('- data-theme:', option.getAttribute('data-theme'));
        });
    }
}



function initTheme() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Ç–µ–º–∞ –≤ localStorage
    let savedTheme = localStorage.getItem('appTheme');
    
    // –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 'light' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!savedTheme) {
        savedTheme = 'light';
        localStorage.setItem('appTheme', 'light');
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ç–µ–º—É –±–µ–∑ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    selectTheme(savedTheme, false);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–∞
function initCustomSelect() {
    const selectTrigger = document.getElementById('selectTrigger');
    const selectDropdown = document.getElementById('selectDropdown');
    const selectValue = document.getElementById('selectValue');
    const hiddenInput = document.getElementById('errorType');
    
    if (!selectTrigger || !selectDropdown || !selectValue || !hiddenInput) return;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É
    selectTrigger.addEventListener('click', function(e) {
        e.stopPropagation();
        const isActive = selectTrigger.classList.contains('active');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç—ã
        document.querySelectorAll('.select-trigger').forEach(trigger => {
            trigger.classList.remove('active');
        });
        document.querySelectorAll('.select-dropdown').forEach(dropdown => {
            dropdown.classList.remove('active');
        });
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ–ª–µ–∫—Ç
        if (!isActive) {
            selectTrigger.classList.add('active');
            selectDropdown.classList.add('active');
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –æ–ø—Ü–∏—è–º
    selectDropdown.addEventListener('click', function(e) {
        if (e.target.classList.contains('select-option')) {
            const value = e.target.dataset.value;
            const text = e.target.dataset.text;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            selectValue.textContent = text;
            if (value === '') {
                selectValue.classList.add('placeholder');
            } else {
                selectValue.classList.remove('placeholder');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ
            hiddenInput.value = value;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –æ–ø—Ü–∏–π
            selectDropdown.querySelectorAll('.select-option').forEach(option => {
                option.classList.remove('selected');
            });
            e.target.classList.add('selected');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–æ–ø–¥–∞—É–Ω
            selectTrigger.classList.remove('active');
            selectDropdown.classList.remove('active');
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ —Å–µ–ª–µ–∫—Ç–∞
    document.addEventListener('click', function(e) {
        if (!selectTrigger.contains(e.target) && !selectDropdown.contains(e.target)) {
            selectTrigger.classList.remove('active');
            selectDropdown.classList.remove('active');
        }
    });
}

// Contact form for specific service
function contactForService(serviceName) {
    closeServiceModal();
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥
    const currentViewed = parseInt(localStorage.getItem('viewedServices') || '0');
    localStorage.setItem('viewedServices', currentViewed + 1);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUserData = window.userData || userData;
    const userName = currentUserData ? `${currentUserData.firstName} ${currentUserData.lastName}`.trim() : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —É—Å–ª—É–≥–∞ "${serviceName}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞.`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
    trackImportantEvent('service_interest', {
        service: serviceName,
        userName: userName,
        message: message
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    showNotification('–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
function fillFeedbackForm(serviceName = null) {
    const nameField = document.getElementById('feedbackName');
    const subjectField = document.getElementById('feedbackSubject');
    const messageField = document.getElementById('feedbackMessage');
    
    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (nameField) {
        const currentUserData = window.userData || userData;
        if (currentUserData && currentUserData.firstName) {
            const fullName = `${currentUserData.firstName} ${currentUserData.lastName || ''}`.trim();
            nameField.value = fullName;
        }
    }
    
    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–º—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —É—Å–ª—É–≥–∞
    if (serviceName) {
        if (subjectField) {
            subjectField.value = `–ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏: ${serviceName}`;
        }
        
        if (messageField) {
            messageField.value = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —É—Å–ª—É–≥–∞ "${serviceName}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞.`;
        }
    }
}

// Contact Form Submission
contactForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const submitBtn = contactForm.querySelector('.contact-submit-btn');
    const originalText = submitBtn.querySelector('.btn-text').textContent;
    
    // Show loading state
    submitBtn.disabled = true;
    submitBtn.classList.add('loading');
    
    // Get form data
    const formData = new FormData(contactForm);
    const data = {
        name: formData.get('name'),
        message: formData.get('message')
    };
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        trackImportantEvent('contact_form', {
            formData: data
        });
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const currentSent = parseInt(localStorage.getItem('sentMessages') || '0');
        localStorage.setItem('sentMessages', currentSent + 1);
        
        // Show success state
        document.getElementById('contactForm').style.display = 'none';
        document.getElementById('contactSuccess').style.display = 'block';
        
        // Animate stats
        animateContactStats();
        
    } catch (error) {
        console.error('Form submission error:', error);
        trackError(error, 'contact');
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', 'error');
    } finally {
        // Reset button state
        submitBtn.disabled = false;
        submitBtn.classList.remove('loading');
    }
});

// Reset contact form
function resetContactForm() {
    document.getElementById('contactForm').reset();
    document.getElementById('contactForm').style.display = 'block';
    document.getElementById('contactSuccess').style.display = 'none';
}

// Animate contact stats
function animateContactStats() {
    const statNumbers = document.querySelectorAll('.stats-section .stat-number');
    
    statNumbers.forEach(stat => {
        const text = stat.textContent;
        if (text.includes('+') || text.includes('%')) {
            // For stats with + or %, animate from 0
            const target = parseInt(text.replace(/[^\d]/g, ''));
            const suffix = text.replace(/\d/g, '');
            const duration = 2000;
            const increment = target / (duration / 16);
            let current = 0;
            
            const timer = setInterval(() => {
                current += increment;
                if (current >= target) {
                    current = target;
                    clearInterval(timer);
                }
                stat.textContent = Math.floor(current) + suffix;
            }, 16);
        }
    });
}

// Animate floating elements on contact page
function animateFloatingElements() {
    // –§—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    console.log('Floating elements removed from design');
}

// Initialize contact page animations
function initContactPage() {
    if (document.getElementById('contact').classList.contains('active')) {
        animateContactStats();
    }
}

// Show competency details
function showCompetencyDetails(competencyId) {
    // Remove active class from all competency items
    document.querySelectorAll('.competency-modern-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Remove active class from all competency details
    document.querySelectorAll('.competency-detail-modern').forEach(detail => {
        detail.classList.remove('active');
    });
    
    // Add active class to selected competency item
    const selectedItem = document.querySelector(`[onclick*="${competencyId}"]`);
    if (selectedItem) {
        selectedItem.classList.add('active');
    }
    
    // Add active class to selected competency detail
    const selectedDetail = document.getElementById(`${competencyId}-detail`);
    if (selectedDetail) {
        selectedDetail.classList.add('active');
    }
}

// Show project details
function showProjectDetails(projectId) {
    // Remove active class from all project items
    document.querySelectorAll('.project-modern-card').forEach(item => {
        item.classList.remove('active');
    });
    
    // Remove active class from all project details
    document.querySelectorAll('.project-detail-modern').forEach(detail => {
        detail.classList.remove('active');
    });
    
    // Add active class to selected project item
    const selectedItem = document.querySelector(`[onclick*="${projectId}"]`);
    if (selectedItem) {
        selectedItem.classList.add('active');
    }
    
    // Add active class to selected project detail
    const selectedDetail = document.getElementById(`${projectId}-detail`);
    if (selectedDetail) {
        selectedDetail.classList.add('active');
    }
}

// Initialize profile page animations
function initProfilePage() {
    if (document.getElementById('about').classList.contains('active')) {
        animateProfileStats();
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–æ—Ñ–∏–ª—è
        loadProfileActionsTexts();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è
        setTimeout(() => {
            if (document.getElementById('profileHelpBtn')) {
                initProfileHelp();
            }
        }, 100);
    }
}

// Animate profile stats
function animateProfileStats() {
    const statNumbers = document.querySelectorAll('.profile-stats-grid .stat-number');
    
    statNumbers.forEach(stat => {
        const text = stat.textContent;
        if (text.includes('+') || text.includes('%')) {
            // For stats with + or %, animate from 0
            const target = parseInt(text.replace(/[^\d]/g, ''));
            const suffix = text.replace(/\d/g, '');
            const duration = 2000;
            const increment = target / (duration / 16);
            let current = 0;
            
            const timer = setInterval(() => {
                current += increment;
                if (current >= target) {
                    current = target;
                    clearInterval(timer);
                }
                stat.textContent = Math.floor(current) + suffix;
            }, 16);
        }
    });
}

// Notification system
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // Show notification
    setTimeout(() => notification.classList.add('show'), 100);
    
    // Remove notification after 5 seconds
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, 5000);
}

// Add notification styles
const notificationStyles = document.createElement('style');
notificationStyles.textContent = `
    .notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: var(--bg-primary);
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        padding: 1rem;
        z-index: 3000;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        max-width: 400px;
    }
    
    .notification.show {
        transform: translateX(0);
    }
    
    .notification-content {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        color: var(--text-primary);
    }
    
    .notification-success i { color: #10b981; }
    .notification-error i { color: #ef4444; }
    .notification-info i { color: #3b82f6; }
    
    /* Mobile notification styles */
    .notification {
        right: 16px;
        left: 16px;
        max-width: none;
    }
`;
document.head.appendChild(notificationStyles);

// Intersection Observer for animations
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
        }
    });
}, observerOptions);

// Observe elements for animation
document.addEventListener('DOMContentLoaded', () => {
    const animatedElements = document.querySelectorAll('.service-card, .about-content, .contact-content');
    
    animatedElements.forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(30px)';
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(el);
    });
});

// Telegram Web App Integration
let tg = null;
let userData = null;
let appTexts = null;
let DEBUG_MODE = false;
const ADMIN_ID = 585028258; // TODO: optionally sync from bot; for now hardcoded
const BOT_TOKEN = "8117473255:AAHT3Nm6nq7Jz4HRN_8i3rT1eQVWZ5tsdLE"; // Bot token for direct API calls
const logsBuffer = [];
const BACKEND_URL = 'https://server-iyp2.onrender.com';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
async function loadTexts() {
    try {
        const response = await fetch('./texts.json');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        appTexts = await response.json();
        console.log('–¢–µ–∫—Å—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤:', error);
        // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
        appTexts = {
            notifications: {
                server: {
                    connecting: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...",
                    unavailable: "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                }
            }
        };
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
function getText(path, defaultText = '') {
    if (!appTexts) {
        console.error('appTexts is null');
        return defaultText;
    }
    
    const keys = path.split('.');
    let current = appTexts;
    
    for (const key of keys) {
        if (current && typeof current === 'object' && key in current) {
            current = current[key];
        } else {
            console.error(`Key not found: ${key} in path: ${path}`);
            return defaultText;
        }
    }
    
    console.log(`getText(${path}) returned:`, current);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    return current;
}

function getBackendUrl() {
    const p = new URLSearchParams(window.location.search);
    const fromParam = p.get('api');
    if (fromParam && /^https?:\/\//i.test(fromParam)) return fromParam.replace(/\/$/, '');
    if (BACKEND_URL && /^https?:\/\//i.test(BACKEND_URL)) return BACKEND_URL.replace(/\/$/, '');
    return '';
}

function getLaunchMode() {
    if (!tg) return 'unknown';
    
    // Use the new launch method detection
    const launchMethod = getAppLaunchMethod();
    
    // Map launch method to mode
    switch (launchMethod) {
        case 'inline':
            return 'keyboard'; // Inline queries work like keyboard mode
        case 'query':
            return 'query';
        case 'keyboard':
            return 'keyboard';
        default:
            // Fallback to old logic
            const hasSendData = typeof tg.sendData === 'function';
            const hasQueryId = !!(tg.initDataUnsafe && tg.initDataUnsafe.query_id);
            if (hasQueryId) return 'query';
            if (hasSendData) return 'keyboard';
            return 'unknown';
    }
}

function appendLog(tag, args) {
    const line = `[${new Date().toISOString()}] ${tag}: ` + args.map(a => {
        if (typeof a === 'string') return a;
        try { return JSON.stringify(a); } catch { return String(a); }
    }).join(' ');
    logsBuffer.push(line);
    const out = document.getElementById('logsOutput');
    if (out) {
        out.textContent += (out.textContent ? '\n' : '') + line;
        out.scrollTop = out.scrollHeight;
    }
}

// Simple on-screen debug console (enabled with ?debug=1)
function initDebugConsole() {
    const params = new URLSearchParams(window.location.search);
    DEBUG_MODE = params.get('debug') === '1';
    if (!DEBUG_MODE) return;
    const wrap = document.createElement('div');
    wrap.id = 'tg-debug-console';
    wrap.style.cssText = 'position:fixed;bottom:16px;right:16px;width:420px;height:240px;overflow:auto;background:rgba(0,0,0,.8);color:#0f0;font:12px/1.4 monospace;z-index:9999;padding:8px;';
    document.body.appendChild(wrap);
    const log = console.log.bind(console);
    const err = console.error.bind(console);
    console.log = (...args) => { log(...args); appendDbg('LOG', args); appendLog('LOG', args); };
    console.error = (...args) => { err(...args); appendDbg('ERR', args); appendLog('ERR', args); };
    function appendDbg(tag, args) {
        const pre = document.createElement('pre');
        pre.style.margin = '0 0 6px';
        pre.style.whiteSpace = 'pre-wrap';
        pre.style.wordBreak = 'break-word';
        pre.textContent = `[${new Date().toISOString()}] ${tag}: ` + args.map(a => safeStringify(a)).join(' ');
        wrap.appendChild(pre);
    }
    function safeStringify(v) {
        try { return typeof v === 'string' ? v : JSON.stringify(v); } catch { return String(v); }
    }
}

document.addEventListener('DOMContentLoaded', initDebugConsole);

// Always capture logs into buffer even without debug UI
(() => {
    const origLog = console.log.bind(console);
    const origErr = console.error.bind(console);
    console.log = (...args) => { origLog(...args); appendLog('LOG', args); };
    console.error = (...args) => { origErr(...args); appendLog('ERR', args); };
})();

function ensureLogsButtonInProfile() {
    if (!userData) return;
    if (String(userData.id) !== String(ADMIN_ID)) return;
    
    // Since we simplified the profile page, we'll add the logs button to the profile card
    const profileCard = document.querySelector('.profile-card');
    if (!profileCard) return;
    if (document.getElementById('openLogsBtn')) return;
    
    const btnWrap = document.createElement('div');
    btnWrap.style.marginTop = '1rem';
    btnWrap.innerHTML = `
        <button id="openLogsBtn" class="btn btn-outline" onclick="showLogsPage()">
            <i class="fas fa-terminal"></i>
            –û—Ç–∫—Ä—ã—Ç—å –ª–æ–≥–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
        </button>
    `;
    profileCard.appendChild(btnWrap);
}

function showLogsPage() {
    const logsSection = document.getElementById('logs');
    if (!logsSection) return;
    // reveal logs page
    logsSection.style.display = '';
    showPage('logs');
    const out = document.getElementById('logsOutput');
    if (out) {
        out.textContent = logsBuffer.join('\n');
        out.scrollTop = out.scrollHeight;
    }
}

function clearLogs() {
    logsBuffer.length = 0;
    const out = document.getElementById('logsOutput');
    if (out) out.textContent = '';
    console.log('Logs cleared');
}

function exportLogs() {
    const blob = new Blob([logsBuffer.join('\n')], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `logs_${new Date().toISOString().replace(/[:.]/g,'-')}.txt`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
}

async function copyLogs() {
    const out = document.getElementById('logsOutput');
    const text = (logsBuffer && logsBuffer.length ? logsBuffer.join('\n') : (out?.textContent || ''));
    if (!text) {
        showNotification('–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'info');
        return;
    }
    try {
        // Try permissions (may be ignored by some webviews)
        try {
            if (navigator.permissions && navigator.permissions.query) {
                await navigator.permissions.query({ name: 'clipboard-write' });
            }
        } catch {}

        // Preferred path: secure context + Clipboard API
        if (window.isSecureContext && navigator.clipboard && navigator.clipboard.writeText) {
            await navigator.clipboard.writeText(text);
            showNotification('–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
            console.log('Logs copied via navigator.clipboard');
            return;
        }

        // Fallback 1: select logsOutput and copy
        if (out) {
            const selection = window.getSelection();
            const range = document.createRange();
            range.selectNodeContents(out);
            selection.removeAllRanges();
            selection.addRange(range);
            const ok = document.execCommand('copy');
            selection.removeAllRanges();
            if (ok) {
                showNotification('–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
                console.log('Logs copied via selection and execCommand');
                return;
            }
        }

        // Fallback 2: hidden textarea (iOS-friendly)
        const ta = document.createElement('textarea');
        ta.value = text;
        ta.setAttribute('readonly', '');
        ta.style.position = 'fixed';
        ta.style.top = '-1000px';
        ta.style.opacity = '0';
        document.body.appendChild(ta);
        ta.focus();
        ta.select();
        // iOS selection range
        try { ta.setSelectionRange(0, ta.value.length); } catch {}
        const ok2 = document.execCommand('copy');
        ta.remove();
        if (!ok2) throw new Error('execCommand returned false');
        showNotification('–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
        console.log('Logs copied via hidden textarea');
    } catch (e) {
        console.error('Failed to copy logs:', e);
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏', 'error');
    }
}
// Check if Telegram Web App API is available and ready
function isTelegramWebAppReady() {
    if (!window.Telegram || !window.Telegram.WebApp) {
        console.log('Telegram Web App API not available');
        return false;
    }
    
    const webApp = window.Telegram.WebApp;
    
    // Check if basic properties are available
    if (typeof webApp.ready !== 'function') {
        console.log('Telegram Web App ready() method not available');
        return false;
    }
    
    // Check if we have any user data
    const hasUserData = webApp.initDataUnsafe?.user || webApp.initData;
    
    console.log('Telegram Web App ready check:', {
        hasReady: typeof webApp.ready === 'function',
        hasUserData: !!hasUserData,
        initDataUnsafe: !!webApp.initDataUnsafe,
        initData: !!webApp.initData
    });
    
    return true;
}

// Check if running in Telegram Web App
function initTelegramWebApp() {
    console.log('initTelegramWebApp called');
    console.log('window.Telegram available:', !!window.Telegram);
    console.log('window.Telegram.WebApp available:', !!(window.Telegram && window.Telegram.WebApp));
    
    if (isTelegramWebAppReady()) {
        console.log('Telegram Web App detected, initializing...');
        tg = window.Telegram.WebApp;
        
        // Initialize Telegram Web App
        try {
            tg.ready();
            console.log('tg.ready() called');
        } catch (e) {
            console.error('Error calling tg.ready():', e);
        }
        
        // Set up safe area for Telegram Mini App
        try {
            // Set viewport to cover safe area
            if (tg.viewportStableHeight) {
                document.documentElement.style.setProperty('--tg-viewport-height', `${tg.viewportStableHeight}px`);
                console.log('Viewport height set to:', tg.viewportStableHeight);
            }
            
            // Set safe area insets if available
            if (tg.safeAreaInsets) {
                const insets = tg.safeAreaInsets;
                document.documentElement.style.setProperty('--safe-area-inset-top', `${insets.top}px`);
                document.documentElement.style.setProperty('--safe-area-inset-bottom', `${insets.bottom}px`);
                document.documentElement.style.setProperty('--safe-area-inset-left', `${insets.left}px`);
                document.documentElement.style.setProperty('--safe-area-inset-right', `${insets.right}px`);
                console.log('Safe area insets set:', insets);
            }
            
            // Listen for viewport changes
            if (typeof tg.onEvent === 'function') {
                tg.onEvent('viewportChanged', () => {
                    console.log('Viewport changed, updating safe area...');
                    if (tg.viewportStableHeight) {
                        document.documentElement.style.setProperty('--tg-viewport-height', `${tg.viewportStableHeight}px`);
                    }
                    if (tg.safeAreaInsets) {
                        const insets = tg.safeAreaInsets;
                        document.documentElement.style.setProperty('--safe-area-inset-top', `${insets.top}px`);
                        document.documentElement.style.setProperty('--safe-area-inset-bottom', `${insets.bottom}px`);
                        document.documentElement.style.setProperty('--safe-area-inset-left', `${insets.left}px`);
                        document.documentElement.style.setProperty('--safe-area-inset-right', `${insets.right}px`);
                    }
                });
                console.log('Viewport change listener added');
            }
        } catch (e) {
            console.error('Error setting up safe area:', e);
        }
        
        // Set theme
        try {
            if (tg.colorScheme === 'dark') {
                document.body.classList.add('tg-dark-theme');
                console.log('Dark theme applied');
            } else {
                console.log('Light theme detected');
            }
        } catch (e) {
            console.error('Error setting theme:', e);
        }
        
        // Main Button is completely disabled - no buttons will appear
        try {
            if (tg.MainButton) {
                tg.MainButton.hide();
                tg.MainButton.disable();
                console.log('MainButton disabled and hidden');
            }
        } catch (e) {
            console.error('Error handling MainButton:', e);
        }
        
        // Load user data with retry mechanism
        console.log('Loading user profile...');
        loadUserProfileWithRetry();
        
        // Toggle banner if in query mode without backend
        setTimeout(() => {
            try {
                const mode = getLaunchMode();
                const api = getBackendUrl();
                const banner = document.getElementById('queryModeBanner');
                if (banner) {
                    if (mode === 'query' && !api) {
                        banner.style.display = '';
                    } else {
                        banner.style.display = 'none';
                    }
                }
            } catch (e) {
                console.error('Error handling banner:', e);
            }
        }, 0);
        
        console.log('Telegram Web App initialized successfully');
    } else {
        console.log('Telegram Web App not available, running in standalone mode');
        
        // Set default safe area values for standalone mode
        document.documentElement.style.setProperty('--safe-area-inset-top', '20px');
        document.documentElement.style.setProperty('--safe-area-inset-bottom', '0px');
        document.documentElement.style.setProperty('--safe-area-inset-left', '0px');
        document.documentElement.style.setProperty('--safe-area-inset-right', '0px');
        console.log('Available global objects:', Object.keys(window).filter(key => key.toLowerCase().includes('telegram')));
        
        // –í standalone —Ä–µ–∂–∏–º–µ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('üîß Standalone —Ä–µ–∂–∏–º: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        
        // Update profile display for standalone mode
        setTimeout(async () => {
            await updateProfileDisplay();
            initDebugButton(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∫–Ω–æ–ø–∫—É
        }, 100);
    }
}

// Determine how the app was opened
function getAppLaunchMethod() {
    console.log('Launch parameters:', {
        hasQueryId: !!(tg?.initDataUnsafe?.query_id),
        hasSendData: typeof tg?.sendData === 'function',
        initDataUnsafe: tg?.initDataUnsafe,
        initData: tg?.initData ? 'present' : 'absent'
    });
    
    if (tg?.initDataUnsafe?.query_id) {
        console.log('Launch method: query (has query_id)');
        return 'query';
    } else if (typeof tg?.sendData === 'function') {
        console.log('Launch method: keyboard (has sendData function)');
        return 'keyboard';
    } else {
        console.log('Launch method: unknown (no clear indicators)');
        return 'unknown';
    }
}

// Function to update safe area insets
function updateSafeAreaInsets() {
    if (tg && tg.safeAreaInsets) {
        const insets = tg.safeAreaInsets;
        document.documentElement.style.setProperty('--safe-area-inset-top', `${insets.top}px`);
        document.documentElement.style.setProperty('--safe-area-inset-bottom', `${insets.bottom}px`);
        document.documentElement.style.setProperty('--safe-area-inset-left', `${insets.left}px`);
        document.documentElement.style.setProperty('--safe-area-inset-right', `${insets.right}px`);
        console.log('Safe area insets updated:', insets);
    }
}

// Retry getting user data with exponential backoff
async function retryGetUserData(maxAttempts = 5, baseDelay = 500) {
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        console.log(`Attempt ${attempt}/${maxAttempts} to get user data`);
        
        try {
            // Try to get user data
            if (tg?.initDataUnsafe?.user) {
                console.log('User data found in initDataUnsafe');
                return tg.initDataUnsafe.user;
            }
            
            if (tg?.initData) {
                const parsed = parseUserFromInitData(tg.initData);
                if (parsed) {
                    console.log('User data parsed from initData');
                    return parsed;
                }
            }
            
            // Try getUserData if available
            if (typeof tg?.getUserData === 'function') {
                try {
                    const userData = await tg.getUserData();
                    if (userData && userData.id) {
                        console.log('User data obtained via getUserData');
                        return userData;
                    }
                } catch (e) {
                    console.log('getUserData failed:', e);
                }
            }
            
            // If this is not the last attempt, wait before retrying
            if (attempt < maxAttempts) {
                const delay = baseDelay * Math.pow(2, attempt - 1); // Exponential backoff
                console.log(`Waiting ${delay}ms before retry...`);
                await new Promise(resolve => setTimeout(resolve, delay));
            }
            
        } catch (error) {
            console.error(`Error in attempt ${attempt}:`, error);
            if (attempt === maxAttempts) {
                throw error;
            }
        }
    }
    
    console.log('All attempts to get user data failed');
    return null;
}

// Wait for user data to be available
async function waitForUserData(maxWaitTime = 5000) {
    const startTime = Date.now();
    
    while (Date.now() - startTime < maxWaitTime) {
        // Check if we have user data from any source
        if (tg?.initDataUnsafe?.user || tg?.initData) {
            console.log('User data found during wait');
            return true;
        }
        
        // Wait a bit before checking again
        await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log('Timeout waiting for user data');
    return false;
}

// Load user profile with retry mechanism
function loadUserProfileWithRetry(maxRetries = 3, delay = 1000) {
    let retryCount = 0;
    
    function attemptLoad() {
        console.log(`Attempting to load user profile (attempt ${retryCount + 1}/${maxRetries})`);
        
        loadUserProfile().then(() => {
            console.log('User profile loaded successfully');
        }).catch((error) => {
            console.error(`Failed to load user profile (attempt ${retryCount + 1}):`, error);
            retryCount++;
            
            if (retryCount < maxRetries) {
                console.log(`Retrying in ${delay}ms...`);
                setTimeout(attemptLoad, delay);
            } else {
                console.error('Max retries reached, showing error');
                showProfileError();
            }
        });
    }
    
    attemptLoad();
}

function parseUserFromInitData(initData) {
    try {
        if (!initData || typeof initData !== 'string') return null;
        const params = new URLSearchParams(initData);
        const userStr = params.get('user');
        if (!userStr) return null;
        const userObj = JSON.parse(decodeURIComponent(userStr));
        return {
            id: userObj.id,
            firstName: userObj.first_name || '',
            lastName: userObj.last_name || '',
            username: userObj.username || '',
            languageCode: userObj.language_code || 'ru',
            isPremium: !!userObj.is_premium,
            photoUrl: userObj.photo_url || null
        };
    } catch (e) {
        console.error('Failed to parse user from initData:', e);
        return null;
    }
}

async function waitForBackendReady(api, totalMs = 15000) {
    const start = Date.now();
    let attempt = 0;
    while (Date.now() - start < totalMs) {
        attempt++;
        try {
            const res = await fetch(`${api}/health`, { method: 'GET', mode: 'cors', cache: 'no-store' });
            if (res.ok) {
                const j = await res.json().catch(() => null);
                if (j && j.ok === true) {
                    console.log('Backend health OK', j);
                    return true;
                }
            }
            console.log('Health attempt', attempt, 'failed with status', res.status);
        } catch (e) {
            console.log('Health attempt', attempt, 'error', e);
        }
        // backoff: 200ms, 400ms, 800ms, ... max 1600ms
        const delay = Math.min(1600, 200 * Math.pow(2, Math.min(4, attempt)));
        await new Promise(r => setTimeout(r, delay));
    }
    return false;
}

function connectWebSocketIfPossible() {
	try {
		const api = getBackendUrl();
		if (!api || !userData || !userData.id) return;
		const wsUrl = api.replace(/^http/i, 'ws') + `/`;
		const url = new URL(wsUrl);
		url.searchParams.set('user_id', String(userData.id));
		if (ws && (ws.readyState === WebSocket.OPEN || ws.readyState === WebSocket.CONNECTING)) return;
		ws = new WebSocket(url.toString());
		ws.onopen = () => console.log('WS connected');
		ws.onmessage = (ev) => {
			try { handleDataFromBot(ev.data); } catch (e) { console.error('WS message error', e); }
		};
		ws.onclose = () => { console.log('WS closed'); ws = null; };
		ws.onerror = (e) => console.error('WS error', e);
	} catch (e) { console.error('connectWebSocketIfPossible error', e); }
}

function startPollingFallback() {
    let timer = null;
    async function tick() {
        try {
            const api = getBackendUrl();
            if (!api || !userData || !userData.id) return;
            const resp = await fetch(`${api}/poll?user_id=${encodeURIComponent(String(userData.id))}`, { headers: { 'bypass-tunnel-reminder': '1' } });
            if (resp.ok) {
                const json = await resp.json().catch(() => null);
                if (json && json.ok && Array.isArray(json.items)) {
                    for (const item of json.items) {
                        try { handleDataFromBot(JSON.stringify(item)); } catch {}
                    }
                }
            }
        } catch (e) {}
    }
    if (timer) clearInterval(timer);
    timer = setInterval(tick, 2000);
}

// Load user profile from Telegram
async function loadUserProfile() {
    console.log('loadUserProfile started');
    
    if (!tg) {
        console.log('Telegram Web App not available (tg is null)');
        showProfileError();
        return;
    }
    
    try {
        console.log('Getting user data from Telegram...');
        console.log('tg.initDataUnsafe:', tg.initDataUnsafe);
        console.log('tg.initData:', tg.initData);
        
        // Try to get user data with retry mechanism
        let rawUserData = await retryGetUserData(5, 500);
        
        // Try multiple sources for user data
        let userData = null;
        
        // Method 1: Direct user object from initDataUnsafe
        if (tg.initDataUnsafe?.user) {
            console.log('Found user in initDataUnsafe.user');
            const user = tg.initDataUnsafe.user;
            userData = {
                id: user.id,
                firstName: user.first_name || '',
                lastName: user.last_name || '',
                username: user.username || '',
                languageCode: user.language_code || 'ru',
                isPremium: !!user.is_premium,
                photoUrl: user.photo_url || null
            };
        }
        
        // Method 2: Parse from initData string
        if (!userData && tg.initData) {
            console.log('Trying to parse user from initData string');
            const parsed = parseUserFromInitData(tg.initData);
            if (parsed) {
                console.log('Successfully parsed user from initData');
                userData = parsed;
            }
        }
        
        // Method 3: Use raw user data from retry function
        if (!userData && rawUserData) {
            console.log('Using raw user data from retry function');
            if (typeof rawUserData === 'object' && rawUserData.id) {
                userData = {
                    id: rawUserData.id,
                    firstName: rawUserData.first_name || rawUserData.firstName || '',
                    lastName: rawUserData.last_name || rawUserData.lastName || '',
                    username: rawUserData.username || '',
                    languageCode: rawUserData.language_code || rawUserData.languageCode || 'ru',
                    isPremium: !!rawUserData.is_premium || !!rawUserData.isPremium,
                    photoUrl: rawUserData.photo_url || rawUserData.photoUrl || null
                };
            }
        }
        
        // Method 4: Try to get user data via Telegram Web App API
        if (!userData && typeof tg.getUserData === 'function') {
            try {
                console.log('Trying to get user data via getUserData()');
                const userDataResult = await tg.getUserData();
                if (userDataResult && userDataResult.id) {
                    console.log('Got user data via getUserData()');
                    userData = {
                        id: userDataResult.id,
                        firstName: userDataResult.first_name || '',
                        lastName: userDataResult.last_name || '',
                        username: userDataResult.username || '',
                        languageCode: userDataResult.language_code || 'ru',
                        isPremium: !!userDataResult.is_premium,
                        photoUrl: userDataResult.photo_url || null
                    };
                }
            } catch (e) {
                console.log('getUserData() failed:', e);
            }
        }
        
        // Method 5: Try to get user data via Telegram Web App API (alternative method)
        if (!userData && typeof tg.getUserData === 'function') {
            try {
                console.log('Trying alternative getUserData approach');
                const userDataResult = tg.getUserData();
                if (userDataResult && userDataResult.id) {
                    console.log('Got user data via alternative getUserData()');
                    userData = {
                        id: userDataResult.id,
                        firstName: userDataResult.first_name || '',
                        lastName: userDataResult.last_name || '',
                        username: userDataResult.username || '',
                        languageCode: userDataResult.language_code || 'ru',
                        isPremium: !!userDataResult.is_premium,
                        photoUrl: userDataResult.photo_url || null
                    };
                }
            } catch (e) {
                console.log('Alternative getUserData() failed:', e);
            }
        }
        
        // If we still don't have user data, try to create a fallback
        if (!userData) {
            console.log('No user data available, creating fallback profile');
            userData = {
                id: 'unknown',
                firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                lastName: 'Telegram',
                username: '',
                languageCode: 'ru',
                isPremium: false,
                photoUrl: null
            };
        }
        
        // Store user data globally
        window.userData = userData;
        console.log('Final user data:', userData);
        
        // Update profile display
        console.log('Updating profile display...');
        await updateProfileDisplay();
        ensureLogsButtonInProfile();
        connectWebSocketIfPossible();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∫–Ω–æ–ø–∫—É
        initDebugButton();
        
        // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±—ç–∫–µ–Ω–¥
        console.log('Profile loaded successfully');
        
        console.log('loadUserProfile completed successfully');
        
    } catch (error) {
        console.error('Error in loadUserProfile:', error);
        console.error('Error details:', {
            name: error.name,
            message: error.message,
            stack: error.stack
        });
        trackError(error, 'about');
        showProfileError();
    }
}

// Get user avatar from Telegram
async function getUserAvatar(userId) {
    try {
        if (!tg || !tg.initDataUnsafe?.user) {
            console.log('Telegram Web App not available for avatar');
            return null;
        }
        
        const user = tg.initDataUnsafe.user;
        if (user.photo_url) {
            console.log('User avatar found:', user.photo_url);
            return user.photo_url;
        }
        
        // Try to get avatar via bot API if we have bot token
        if (BOT_TOKEN && userId) {
            const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getUserProfilePhotos?user_id=${userId}&limit=1`);
            if (response.ok) {
                const data = await response.json();
                if (data.ok && data.result.photos.length > 0) {
                    const photo = data.result.photos[0][0];
                    const avatarUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${photo.file_id}`;
                    console.log('Avatar obtained via Bot API:', avatarUrl);
                    return avatarUrl;
                }
            }
        }
        
        console.log('No avatar available');
        return null;
    } catch (error) {
        console.error('Error getting user avatar:', error);
        return null;
    }
}

// Get user status (User/Admin) from backend or bot
async function getUserStatus(userId) {
    try {
        // Check if user is admin (hardcoded for now, can be moved to backend)
        if (String(userId) === String(ADMIN_ID)) {
            return {
                isAdmin: true,
                status: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                icon: 'fas fa-shield-alt'
            };
        }
        
        // Try to get status from backend if available
        const api = getBackendUrl();
        if (api) {
            try {
                const response = await fetch(`${api}/api/user/status?user_id=${userId}`);
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        return {
                            isAdmin: data.isAdmin,
                            status: data.isAdmin ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                            icon: data.isAdmin ? 'fas fa-shield-alt' : 'fas fa-user'
                        };
                    }
                }
            } catch (e) {
                console.log('Backend status check failed, using default');
            }
        }
        
        // Default status
        return {
            isAdmin: false,
            status: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            icon: 'fas fa-user'
        };
    } catch (error) {
        console.error('Error getting user status:', error);
        return {
            isAdmin: false,
            status: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            icon: 'fas fa-user'
        };
    }
}

// Update profile display with user data
async function updateProfileDisplay() {
    console.log('updateProfileDisplay called');
    
    // Get userData from global scope or window object
    const currentUserData = window.userData || userData;
    
    if (!currentUserData) {
        console.log('No userData available, skipping update');
        return;
    }
    
    console.log('Updating profile with userData:', currentUserData);
    
    // Update profile elements
    const userNameElement = document.getElementById('userName');
    const userAvatarElement = document.getElementById('userAvatar');
    const userStatusBadge = document.getElementById('userStatusBadge');
    const userLanguageBadge = document.getElementById('userLanguageBadge');
    const userPremiumBadge = document.getElementById('userPremiumBadge');
    const userIdElement = document.getElementById('userId');
    const userUsernameElement = document.getElementById('userUsername');
    
    console.log('Profile elements found:', {
        userNameElement: !!userNameElement,
        userAvatarElement: !!userAvatarElement,
        userStatusBadge: !!userStatusBadge,
        userLanguageBadge: !!userLanguageBadge,
        userPremiumBadge: !!userPremiumBadge,
        userIdElement: !!userIdElement,
        userUsernameElement: !!userUsernameElement
    });
    
    // Update user name
    if (userNameElement) {
        const fullName = `${currentUserData.firstName} ${currentUserData.lastName}`.trim();
        userNameElement.textContent = fullName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        console.log('User name updated:', fullName);
    }
    
    // Update user ID
    if (userIdElement) {
        userIdElement.textContent = currentUserData.id || '‚Äî';
        console.log('User ID updated:', currentUserData.id);
    }
    
    // Update username
    if (userUsernameElement) {
        const username = currentUserData.username ? `@${currentUserData.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω';
        userUsernameElement.textContent = username;
        console.log('User username updated:', username);
    }
    
    // Update avatar with Telegram photo
    if (userAvatarElement) {
        try {
            const avatarUrl = await getUserAvatar(currentUserData.id);
            if (avatarUrl) {
                userAvatarElement.innerHTML = `
                    <img src="${avatarUrl}" alt="Avatar">
                `;
                console.log('User avatar updated with Telegram photo');
            } else {
                // Reset to default icon
                userAvatarElement.innerHTML = `
                    <i class="fas fa-user-tie"></i>
                `;
                console.log('User avatar reset to default icon');
            }
        } catch (error) {
            console.error('Error updating avatar:', error);
            // Fallback to default icon
            userAvatarElement.innerHTML = `
                <i class="fas fa-user-tie"></i>
            `;
        }
    }
    
    // Update status badge (User/Admin) from backend or bot
    if (userStatusBadge) {
        try {
            const userStatus = await getUserStatus(currentUserData.id);
            userStatusBadge.innerHTML = `<i class="${userStatus.icon}"></i> ${userStatus.status}`;
            console.log('User status badge updated:', userStatus.status);
        } catch (error) {
            console.error('Error updating status:', error);
            // Fallback to basic status
            const status = currentUserData.id === '585028258' ? '–ê–¥–º–∏–Ω' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            const icon = currentUserData.id === '585028258' ? 'fas fa-shield-alt' : 'fas fa-user';
            userStatusBadge.innerHTML = `<i class="${icon}"></i> ${status}`;
        }
    }
    
    // Update language badge
    if (userLanguageBadge) {
        const language = currentUserData.languageCode ? currentUserData.languageCode.toUpperCase() : 'RU';
        userLanguageBadge.innerHTML = `<i class="fas fa-globe"></i> ${language}`;
        console.log('User language badge updated:', language);
    }
    
    // Update premium badge
    if (userPremiumBadge) {
        const premium = currentUserData.isPremium ? '–ü—Ä–µ–º–∏—É–º' : '–û–±—ã—á–Ω—ã–π';
        const icon = currentUserData.isPremium ? 'fas fa-crown' : 'fas fa-user';
        userPremiumBadge.innerHTML = `<i class="${icon}"></i> ${premium}`;
        console.log('User premium badge updated:', premium);
    }
    
    console.log('updateProfileDisplay completed');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    setTimeout(() => {
        if (document.getElementById('profileHelpBtn')) {
            initProfileHelp();
        }
    }, 100);
}

// Update profile data section
function updateProfileDataSection(currentUserData) {
    const profileDataElement = document.getElementById('profileData');
    if (!profileDataElement) {
        console.log('Profile data element not found');
        return;
    }
    
    if (!currentUserData) {
        console.log('No user data for profile section update');
        return;
    }
    
    profileDataElement.innerHTML = `
        <div class="profile-info-grid">
            <div class="profile-info-item">
                <div class="info-label">
                    <i class="fas fa-id-card"></i>
                    <span>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</span>
                </div>
                <div class="info-value">${currentUserData.id}</div>
            </div>
            
            <div class="profile-info-item">
                <div class="info-label">
                    <i class="fas fa-user"></i>
                    <span>–ò–º—è</span>
                </div>
                <div class="info-value">${currentUserData.firstName} ${currentUserData.lastName}</div>
            </div>
            
            <div class="profile-info-item">
                <div class="info-label">
                    <i class="fas fa-at"></i>
                    <span>Username</span>
                </div>
                <div class="info-value">${currentUserData.username ? '@' + currentUserData.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
            </div>
            
            <div class="profile-info-item">
                <div class="info-label">
                    <i class="fas fa-globe"></i>
                    <span>–Ø–∑—ã–∫</span>
                </div>
                <div class="info-value">${currentUserData.languageCode.toUpperCase()}</div>
            </div>
            
            <div class="profile-info-item">
                <div class="info-label">
                    <i class="fas fa-crown"></i>
                    <span>–°—Ç–∞—Ç—É—Å</span>
                </div>
                <div class="info-value">${currentUserData.isPremium ? 'Premium' : '–û–±—ã—á–Ω—ã–π'}</div>
            </div>
        </div>
    `;
    
    console.log('Profile data section updated');
}

// Update activity timeline
function updateActivityTimeline() {
    const lastLoginTime = document.getElementById('lastLoginTime');
    const viewedServices = document.getElementById('viewedServices');
    const sentMessages = document.getElementById('sentMessages');
    
    if (lastLoginTime) {
        const now = new Date();
        const timeString = now.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
        lastLoginTime.textContent = timeString;
    }
    
    if (viewedServices) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –∏–∑ localStorage –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
        const viewed = localStorage.getItem('viewedServices') || 0;
        viewedServices.textContent = viewed;
    }
    
    if (sentMessages) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ localStorage –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
        const sent = localStorage.getItem('sentMessages') || 0;
        sentMessages.textContent = sent;
    }
    
    console.log('Activity timeline updated');
}

// Show profile error
function showProfileError() {
    const profileDataElement = document.getElementById('profileData');
    if (profileDataElement) {
        profileDataElement.innerHTML = `
            <div class="profile-error">
                <i class="fas fa-exclamation-triangle"></i>
                <span>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</span>
                <button class="btn btn-outline" onclick="loadUserProfile()">
                    <i class="fas fa-redo"></i>
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }
}

// Refresh profile
function refreshProfile() {
    console.log('refreshProfile called');
    
    // Clear any existing user data
    window.userData = null;
    
    // Reload user profile
    loadUserProfileWithRetry(2, 500);
    
    // Show notification
    showNotification('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...', 'info');
}

// Edit profile (placeholder for future functionality)
function editProfile() {
    showNotification('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', 'info');
    
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏, –∞–≤–∞—Ç–∞—Ä–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
}

// Send user data to bot (updated to use new system)
async function sendUserDataToBot(userData) {
    // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±—ç–∫–µ–Ω–¥
    console.log('User data loaded:', userData);
    return true;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥
async function sendEventToBackend(eventType, eventData = {}, options = {}) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    trackImportantEvent(eventType, eventData);
    return true;
}

// Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
async function sendEventFallback(eventType, eventData, userData) {
    console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${eventType}`);
    
    const payload = {
        type: eventType,
        userData: userData,
        timestamp: new Date().toISOString(),
        ...eventData
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é sendDataToBot, –Ω–æ –ù–ï tg.sendData()
    return await sendDataToBot(payload);
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
function trackImportantEvent(eventType, eventData = {}) {
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
    const importantEvents = [
        'contact_form',
        'service_interest',
        'review_submit',
        'error_report',
        'order_submit',
        'payment_request',
        'support_request',
        'chat_message'
    ];
    
    if (!importantEvents.includes(eventType)) {
        console.log(`üìä –°–æ–±—ã—Ç–∏–µ ${eventType} –ø—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –≤–∞–∂–Ω–æ–µ)`);
        return;
    }
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è ${eventType}:`, eventData);
    
    if (!tg) {
        console.log('Telegram Web App –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
    }

    const currentUserData = window.userData || userData;
    const api = getBackendUrl();
    
    if (!api) {
        console.log('–ë—ç–∫–µ–Ω–¥ URL –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    fetch(`${api}/api/event`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            type: eventType,
            data: eventData,
            userData: currentUserData,
            queryId: tg.initDataUnsafe?.query_id || null
        })
    }).then(response => response.json())
    .then(result => {
        if (result.success) {
            console.log(`‚úÖ –í–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ ${eventType} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            const message = getNotificationMessage(eventType);
            if (message) {
                showNotification(message, 'success');
            }
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è ${eventType}:`, result);
        }
    }).catch(error => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è ${eventType}:`, error);
    });
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
function trackPageNavigation(pageId, previousPage = null) {
    console.log(`üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è: ${previousPage} ‚Üí ${pageId}`);
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±—ç–∫–µ–Ω–¥, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
function trackButtonClick(buttonName, page = null) {
    console.log(`üîò –ö–ª–∏–∫: ${buttonName} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}`);
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±—ç–∫–µ–Ω–¥, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–æ—Ä–º
function trackFormSubmit(formType, formData) {
    const isImportant = ['contact_form', 'order_submit', 'support_request', 'error_report'].includes(formType);
    if (isImportant) {
        trackImportantEvent(formType, { formData: formData });
    } else {
        console.log(`üìù –§–æ—Ä–º–∞ ${formType} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–Ω–µ –≤–∞–∂–Ω–∞—è)`);
    }
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ (—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
function trackError(error, page = null) {
    console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}:`, error);
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±—ç–∫–µ–Ω–¥, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π (—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
function trackAnalyticsEvent(event, category = null, value = null) {
    console.log(`üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: ${event} (${category}: ${value})`);
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±—ç–∫–µ–Ω–¥, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function getCurrentPage() {
    const activePage = document.querySelector('.page.active');
    return activePage ? activePage.id : 'unknown';
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é sendDataToBot –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
async function sendDataToBot(data) {
    console.log('sendDataToBot called with:', data);
    
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–æ–±—ã—Ç–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    if (data.type && data.type !== 'unknown') {
        trackImportantEvent(data.type, data);
        return true;
    }
    
    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    if (!tg) {
        console.log('Telegram Web App not available (tg is null)');
        return false;
    }

    const mode = getLaunchMode();
    console.log('Launch mode:', mode);
    console.log('tg.sendData available:', typeof tg.sendData === 'function');
    console.log('tg.initDataUnsafe.query_id:', tg.initDataUnsafe?.query_id);

    // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º tg.sendData –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã Mini App –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª—Å—è
    // tg.sendData() –∑–∞–∫—Ä—ã–≤–∞–µ—Ç Mini App, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±—ç–∫–µ–Ω–¥

    // First try: use backend if available
    const api = getBackendUrl();
    if (api) {
        try {
            const ready = await waitForBackendReady(api, 5000);
            if (ready) {
                console.log('Sending data to backend for answerWebAppQuery:', { api, data });
                const resp = await fetch(`${api}/webapp-data`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        initData: tg.initData, 
                        payload: data, 
                        queryId: tg.initDataUnsafe?.query_id || null 
                    })
                });
                const json = await resp.json().catch(() => ({}));
                if (!resp.ok || json.ok === false) {
                    console.error('Backend returned error', json);
                    showNotification('–°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
                    return false;
                }
                console.log('Backend accepted data successfully:', json);
                
                if (json.sentToAdmin) {
                    showNotification('–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!', 'success');
                } else {
                    showNotification('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º!', 'success');
                }
                return true;
            } else {
                showNotification('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.', 'error');
            }
        } catch (e) {
            console.error('Failed to call backend:', e);
            showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.', 'error');
        }
    }

    // Second try: send directly to Telegram Bot API (fallback)
    try {
        const message = `üì± –î–∞–Ω–Ω—ã–µ –∏–∑ Mini App:\n\n` +
            `–¢–∏–ø: ${data.type || 'unknown'}\n` +
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.userData?.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ${data.userData?.lastName || ''}\n` +
            `ID: ${data.userData?.id || '‚Äî'}\n` +
            `Username: @${data.userData?.username || '‚Äî'}\n\n` +
            `–°–æ–æ–±—â–µ–Ω–∏–µ:\n${data.message || data.formData?.message || '‚Äî'}\n\n` +
            `–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

        const botApiUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
        const response = await fetch(botApiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: ADMIN_ID,
                text: message,
                parse_mode: 'HTML'
            })
        });

        if (response.ok) {
            console.log('Data sent to admin via Bot API');
            showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!', 'success');
            return true;
        } else {
            const errText = await response.text();
            console.error('Bot API error response:', errText);
        }
    } catch (e) {
        console.error('Failed to send via Bot API:', e);
    }

    showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', 'error');
    return false;
}

// Handle data from bot
function handleDataFromBot(data) {
    try {
        const parsedData = JSON.parse(data);
        console.log('Received data from bot:', parsedData);
        
        // Handle different types of data
        switch (parsedData.type) {
            case 'profile_update':
                if (parsedData.userData) {
                    userData = { ...userData, ...parsedData.userData };
                    updateProfileDisplay();
                }
                break;
            case 'notification':
                if (parsedData.message) {
                    showNotification(parsedData.message, parsedData.level || 'info');
                }
                break;
            case 'page_navigation':
                if (parsedData.page) {
                    showPage(parsedData.page);
                }
                break;
            default:
                console.log('Unknown data type from bot:', parsedData.type);
        }
        
    } catch (error) {
        console.error('Error parsing data from bot:', error);
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', initTelegramWebApp);

// Function to handle responsive tag hiding
function handleResponsiveTags() {
    const featureDetails = document.querySelectorAll('.feature-detail');
    
    featureDetails.forEach(detail => {
        const highlights = detail.querySelector('.feature-highlights');
        const tags = highlights?.querySelectorAll('span');
        const text = detail.querySelector('p');
        
        if (!highlights || !tags || !text) return;
        
        // Check if text is being cut off
        const textRect = text.getBoundingClientRect();
        const highlightsRect = highlights.getBoundingClientRect();
        const detailRect = detail.getBoundingClientRect();
        
        // If highlights overlap with text area, hide tags progressively
        if (highlightsRect.top < textRect.bottom + 10) {
            // Hide tags from right to left
            for (let i = tags.length - 1; i >= 0; i--) {
                tags[i].style.display = 'none';
                
                // Check if there's enough space now
                const newHighlightsRect = highlights.getBoundingClientRect();
                if (newHighlightsRect.top >= textRect.bottom + 5) {
                    break;
                }
            }
        } else {
            // Show all tags if there's enough space
            tags.forEach(tag => {
                tag.style.display = 'inline-block';
            });
        }
    });
}

// Call on load and resize
window.addEventListener('resize', handleResponsiveTags);
window.addEventListener('load', handleResponsiveTags);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
window.addEventListener('error', (event) => {
    console.error('Global error caught:', event.error);
    trackError(event.error, getCurrentPage());
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled promise rejection:', event.reason);
    trackError(event.reason, getCurrentPage());
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
function initTrackingSystem() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è...');
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log('üìä –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
setTimeout(initTrackingSystem, 2000);

// After init, set up WS or polling
setTimeout(() => {
    connectWebSocketIfPossible();
    startPollingFallback();
}, 1500);

// Add Telegram Web App specific styles
const tgStyles = document.createElement('style');
tgStyles.textContent = `
    .tg-dark-theme {
        --bg-primary: #1f2937;
        --bg-secondary: #111827;
        --bg-accent: #374151;
        --text-primary: #f9fafb;
        --text-secondary: #d1d5db;
        --text-light: #9ca3af;
        --border-color: #374151;
    }
    
    .tg-dark-theme .mobile-nav {
        background: rgba(31, 41, 55, 0.95);
        border-top-color: #374151;
    }
    
    .tg-dark-theme .service-card,
    .tg-dark-theme .profile-card {
        background: #374151;
        color: #f9fafb;
    }
    
    .tg-dark-theme .modal-content {
        background: #374151;
        color: #f9fafb;
    }
`;
document.head.appendChild(tgStyles);

// Performance optimization: Lazy load images and defer non-critical operations
document.addEventListener('DOMContentLoaded', () => {
    // Add loading="lazy" to images if any are added later
    const images = document.querySelectorAll('img');
    images.forEach(img => {
        img.loading = 'lazy';
    });
    
    // Preload critical resources
    const preloadLinks = [
        { rel: 'preload', href: 'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap', as: 'style' },
        { rel: 'preload', href: 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css', as: 'style' }
    ];
    
    preloadLinks.forEach(link => {
        const linkElement = document.createElement('link');
        Object.assign(linkElement, link);
        document.head.appendChild(linkElement);
    });
});

// Add service modal styles
const modalStyles = document.createElement('style');
modalStyles.textContent = `
    .service-modal h2 {
        color: var(--text-primary);
        margin-bottom: 1rem;
        text-align: center;
    }
    
    .service-description {
        text-align: center;
        margin-bottom: 2rem;
        color: var(--text-secondary);
        font-size: 1.125rem;
    }
    
    .service-details {
        margin-bottom: 2rem;
    }
    
    .detail-item {
        margin-bottom: 1.5rem;
    }
    
    .detail-item h4 {
        color: var(--text-primary);
        margin-bottom: 0.75rem;
        font-size: 1.125rem;
    }
    
    .detail-item ul {
        list-style: none;
        padding-left: 0;
    }
    
    .detail-item li {
        padding: 0.5rem 0;
        border-bottom: 1px solid var(--border-color);
        color: var(--text-secondary);
    }
    
    .detail-item li:last-child {
        border-bottom: none;
    }
    
    .tech-tags {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }
    
    .tech-tags span {
        background: var(--primary-color);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 500;
    }
    
    .price {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--primary-color);
    }
    
    .modal-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
    }
    
    /* Mobile modal actions */
    .modal-actions {
        flex-direction: column;
    }
    
    .modal-actions .btn {
        width: 100%;
    }
`;
document.head.appendChild(modalStyles); 

// Home page functionality - removed old feature details

// Tag Modal Functionality
function openTagModal(tagType) {
    const tagData = {
        'product-manager': {
            title: 'Product Manager',
            description: '–í–µ–¥—É –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Ç –∏–¥–µ–∏ –¥–æ –∑–∞–ø—É—Å–∫–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫, —Å–æ–∑–¥–∞—é –¥–æ—Ä–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã, –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤. –í–∫–ª—é—á–∞—é UX –∞–Ω–∞–ª–∏–∑ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º.',
            details: [
                '–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π',
                'UX/UI –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
                '–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                'A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏'
            ],
            icon: 'fas fa-project-diagram'
        },
        'automation': {
            title: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
            description: '–°–æ–∑–¥–∞—é —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –û—Ç –ø—Ä–æ—Å—Ç—ã—Ö –±–æ—Ç–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å CRM –∏ ERP —Å–∏—Å—Ç–µ–º–∞–º–∏.',
            details: [
                'Telegram –±–æ—Ç—ã –∏ —á–∞—Ç-–±–æ—Ç—ã',
                '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á',
                '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
                '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã',
                '–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π'
            ],
            icon: 'fas fa-cogs'
        },

        'ai-expert': {
            title: 'AI –≠–∫—Å–ø–µ—Ä—Ç',
            description: '–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã. –°–æ–∑–¥–∞—é —É–º–Ω—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤, —á–∞—Ç-–±–æ—Ç–æ–≤ –∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.',
            details: [
                'OpenAI GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
                '–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞',
                '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
                '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤',
                '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
            ],
            icon: 'fas fa-robot'
        },

        'analytics': {
            title: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            description: '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞—é –¥–∞—à–±–æ—Ä–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –±–∏–∑–Ω–µ—Å–∞. –í–∫–ª—é—á–∞—é UX –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.',
            details: [
                '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Analytics',
                '–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–æ–≤',
                'UX –∞–Ω–∞–ª–∏–∑ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
                '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏',
                'A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                '–û—Ç—á–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
            ],
            icon: 'fas fa-chart-line'
        },
        'no-code': {
            title: 'No-Code',
            description: '–°–æ–∑–¥–∞—é —Ä–µ—à–µ–Ω–∏—è –±–µ–∑ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è.',
            details: [
                'Webflow –∏ Bubble',
                'Zapier –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
                'Airtable –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
                'Make (Integromat)',
                '–ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ'
            ],
            icon: 'fas fa-code'
        },
        'startups': {
            title: '–°—Ç–∞—Ä—Ç–∞–ø—ã',
            description: '–ü–æ–º–æ–≥–∞—é —Å—Ç–∞—Ä—Ç–∞–ø–∞–º —Å MVP, —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏—è—Ö.',
            details: [
                'MVP —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
                '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è',
                '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
                '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏',
                '–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ'
            ],
            icon: 'fas fa-rocket'
        }
    };

    const tag = tagData[tagType];
    if (tag) {
        const modalContent = document.getElementById('tagModalContent');
        modalContent.innerHTML = `
            <div class="tag-modal">
                <div class="tag-modal-header">
                    <div class="tag-modal-icon">
                        <i class="${tag.icon}"></i>
                    </div>
                    <h3>${tag.title}</h3>
                </div>
                <p class="tag-modal-description">${tag.description}</p>
                <div class="tag-modal-details">
                    <h4>–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç:</h4>
                    <ul>
                        ${tag.details.map(detail => `<li>${detail}</li>`).join('')}
                    </ul>
                </div>
            </div>
        `;
        
        document.getElementById('tagModal').style.display = 'block';
        document.body.style.overflow = 'hidden';
    }
}

// Close tag modal
function closeTagModal() {
    document.getElementById('tagModal').style.display = 'none';
    document.body.style.overflow = 'auto';
}

// Randomize tag order on page load
function randomizeTags() {
    const authorBadges = document.querySelector('.author-badges');
    if (authorBadges) {
        const badges = Array.from(authorBadges.children);
        
        // Fisher-Yates shuffle algorithm
        for (let i = badges.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            authorBadges.appendChild(badges[j]);
        }
    }
}

// Initialize tag modal functionality
document.addEventListener('DOMContentLoaded', function() {
    // Close modal when clicking on close button or outside modal
    const tagModal = document.getElementById('tagModal');
    const closeBtn = tagModal.querySelector('.close');
    
    closeBtn.addEventListener('click', closeTagModal);
    
    tagModal.addEventListener('click', function(e) {
        if (e.target === tagModal) {
            closeTagModal();
        }
    });
    
    // Randomize tags when page loads
    if (document.getElementById('contact').classList.contains('active')) {
        randomizeTags();
    }
});



async function updateAuthorAvatar() {
  const userAvatar = document.querySelector('.author-avatar#userAvatar');
  if (!userAvatar) return;
  const currentUserData = window.userData || userData;
  if (currentUserData && currentUserData.photoUrl) {
    userAvatar.innerHTML = `<img src="${currentUserData.photoUrl}" alt="Avatar" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">`;
  } else {
    userAvatar.innerHTML = `<i class="fas fa-user-tie"></i>`;
  }
}
// –ü–æ—Å–ª–µ updateProfileDisplay –∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤—ã–∑—ã–≤–∞—Ç—å updateAuthorAvatar
const origUpdateProfileDisplay = updateProfileDisplay;
updateProfileDisplay = async function() {
  await origUpdateProfileDisplay.apply(this, arguments);
  await updateAuthorAvatar();
};

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}


// –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤—ã—à–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã

// –û–±—â–∞—è –±–∞–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –≤—Å–µ—Ö —É—Å–ª—É–≥ (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î)
let globalReviews = [];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–∞–Ω–Ω—ã—Ö
window.dataCache = {
    reviews: {
        data: [],
        lastUpdate: 0,
        updateInterval: 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç
    },
    chatMessages: {
        data: {},
        lastUpdate: 0,
        updateInterval: 10 * 1000 // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —á–∞—Ç–∞
    },
    stats: {
        data: {},
        lastUpdate: 0,
        updateInterval: 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
    },
    averageRating: {
        data: null,
        lastUpdate: 0,
        updateInterval: 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function fetchDataFromDB(dataType, limit = 50, forceUpdate = false) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    return await loadDataWithFallback(dataType, forceUpdate);
}

async function fetchStatsFromDB(forceUpdate = false) {
    const cache = window.dataCache.stats;
    const now = Date.now();
    
    // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (window.dataCache.stats) {
        window.dataCache.stats.data = {};
        window.dataCache.stats.lastUpdate = 0;
        console.log('üßπ –ö—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–∏—â–µ–Ω –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
    
    try {
        const response = await fetch(`${BACKEND_URL}/api/frontend/stats`);
        if (response.ok) {
            const result = await response.json();
            const stats = result.success ? result.stats : {};
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            window.dataCache.stats.data = stats;
            window.dataCache.stats.lastUpdate = now;
            
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å–≤–µ–∂–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
            return stats;
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', response.status);
            return {};
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return {};
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –ë–î
async function loadReviewsFromDB(forceUpdate = false) {
    try {
        const reviewsData = await fetchDataFromDB('reviews', 100, forceUpdate);
        
        if (reviewsData.length > 0) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            globalReviews = reviewsData.map(review => {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                let userName;
                if (review.username) {
                    userName = `@${review.username}`;
                } else if (review.first_name) {
                    userName = review.first_name;
                } else {
                    userName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                }
                
                return {
                    user: userName,
                    rating: review.rating,
                    comment: review.comment,
                    date: review.review_date || new Date(review.timestamp).toLocaleDateString('ru-RU')
                };
            });
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${globalReviews.length} –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –ë–î`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –æ—Ç–∑—ã–≤–æ–≤
            if (window.dataCache.reviews) {
                window.dataCache.reviews.data = globalReviews;
                window.dataCache.reviews.lastUpdate = Date.now();
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É
            await loadAverageRating(forceUpdate);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
            updateReviewsDisplay();
        } else {
            console.log('üì≠ –û—Ç–∑—ã–≤–æ–≤ –≤ –ë–î –ø–æ–∫–∞ –Ω–µ—Ç');
            globalReviews = [];
            updateReviewsDisplay();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –ë–î:', error);
        globalReviews = [];
        updateReviewsDisplay();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏
async function loadAverageRating(forceUpdate = false) {
    try {
        const averageRatingData = await fetchDataFromDB('average_rating', 1, forceUpdate);
        
        if (averageRatingData.length > 0) {
            const ratingData = averageRatingData[0];
            window.averageRating = {
                rating: ratingData.average_rating || 0,
                totalReviews: ratingData.total_reviews || 0,
                lastUpdated: ratingData.last_updated || new Date().toISOString()
            };
            
            console.log(`‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${window.averageRating.rating}/5 (${window.averageRating.totalReviews} –æ—Ç–∑—ã–≤–æ–≤)`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            if (window.dataCache.averageRating) {
                window.dataCache.averageRating.data = window.averageRating;
                window.dataCache.averageRating.lastUpdate = Date.now();
            }
        } else {
            window.averageRating = { rating: 0, totalReviews: 0, lastUpdated: new Date().toISOString() };
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏:', error);
        window.averageRating = { rating: 0, totalReviews: 0, lastUpdated: new Date().toISOString() };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –∏–∑ –ë–î
async function loadChatMessagesFromDB(forceUpdate = false) {
    try {
        const chatData = await fetchDataFromDB('chat_messages', 50, forceUpdate);
        
        if (chatData.length > 0) {
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑–∞–º
            const groupedMessages = {};
            
            chatData.forEach(msg => {
                const orderId = msg.order_id;
                if (!groupedMessages[orderId]) {
                    groupedMessages[orderId] = [];
                }
                
                groupedMessages[orderId].push({
                    text: msg.message,
                    isAdmin: false, // –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    timestamp: msg.timestamp
                });
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
            window.chatData = groupedMessages;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —á–∞—Ç–∞
            if (window.dataCache.chatMessages) {
                window.dataCache.chatMessages.data = groupedMessages;
                window.dataCache.chatMessages.lastUpdate = Date.now();
            }
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${chatData.length} —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –∏–∑ –ë–î`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞ –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
            if (currentChat) {
                loadChatMessages(currentChat);
            }
        } else {
            console.log('üì≠ –°–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –≤ –ë–î –ø–æ–∫–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (window.dataCache.chatMessages && Object.keys(window.dataCache.chatMessages.data).length > 0) {
                window.chatData = window.dataCache.chatMessages.data;
                if (currentChat) {
                    loadChatMessages(currentChat);
                }
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –∏–∑ –ë–î:', error);
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (window.dataCache.chatMessages && Object.keys(window.dataCache.chatMessages.data).length > 0) {
            console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ');
            window.chatData = window.dataCache.chatMessages.data;
            if (currentChat) {
                loadChatMessages(currentChat);
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —á–∞—Ç–∞
async function loadChatOrdersFromDB(forceUpdate = false) {
    try {
        const chatOrdersData = await fetchDataFromDB('chat_orders', 100, forceUpdate);
        
        if (chatOrdersData.length > 0) {
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∑–∞–∫–∞–∑–∞–º–∏ –¥–ª—è —á–∞—Ç–∞
            const chatOrders = {};
            
            chatOrdersData.forEach(order => {
                chatOrders[order.id] = {
                    id: order.id,
                    service: order.service_name,
                    status: order.status,
                    date: new Date(order.timestamp).toLocaleDateString('ru-RU'),
                    message: order.message
                };
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —á–∞—Ç–∞
            window.chatOrders = chatOrders;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —á–∞—Ç–∞
            if (window.dataCache.chatOrders) {
                window.dataCache.chatOrders.data = chatOrders;
                window.dataCache.chatOrders.lastUpdate = Date.now();
            }
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${chatOrdersData.length} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —á–∞—Ç–∞ –∏–∑ –ë–î`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –µ—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç
            if (document.getElementById('chat-page') && document.getElementById('chat-page').classList.contains('active')) {
                updateChatOrderTags();
            }
        } else {
            console.log('üì≠ –ó–∞–∫–∞–∑–æ–≤ –¥–ª—è —á–∞—Ç–∞ –≤ –ë–î –ø–æ–∫–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if (window.dataCache.chatOrders && Object.keys(window.dataCache.chatOrders.data).length > 0) {
                window.chatOrders = window.dataCache.chatOrders.data;
                if (document.getElementById('chat-page') && document.getElementById('chat-page').classList.contains('active')) {
                    updateChatOrderTags();
                }
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —á–∞—Ç–∞ –∏–∑ –ë–î:', error);
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (window.dataCache.chatOrders && Object.keys(window.dataCache.chatOrders.data).length > 0) {
            console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —á–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ');
            window.chatOrders = window.dataCache.chatOrders.data;
            if (document.getElementById('chat-page') && document.getElementById('chat-page').classList.contains('active')) {
                updateChatOrderTags();
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
function updateReviewsDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–∑—ã–≤–æ–≤
    if (document.getElementById('reviews-page') && document.getElementById('reviews-page').classList.contains('active')) {
        updateReviewsPage();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö —É—Å–ª—É–≥
    const activeModal = document.querySelector('.modal.active');
    if (activeModal && activeModal.querySelector('.reviews-list')) {
        const reviewsHtml = renderReviews();
        const reviewsContainer = activeModal.querySelector('.reviews-list').parentElement;
        if (reviewsContainer) {
            reviewsContainer.innerHTML = reviewsHtml;
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –≤ —á–∞—Ç–µ
function updateChatOrderTags() {
    const orderTags = document.getElementById('orderTags');
    if (!orderTags) return;
    
    const chatOrders = window.chatOrders || {};
    const orderIds = Object.keys(chatOrders);
    
    if (orderIds.length === 0) {
        orderTags.innerHTML = '<div class="no-orders">–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
        return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã: –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞, –∑–∞—Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
    const sortedOrders = orderIds.sort((a, b) => {
        const orderA = chatOrders[a];
        const orderB = chatOrders[b];
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∞–∫—Ç–∏–≤–Ω—ã–µ > –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ > –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
        const statusPriority = {
            'active': 3,
            'pending': 2,
            'completed': 1,
            'cancelled': 0
        };
        
        const priorityA = statusPriority[orderA.status] || 0;
        const priorityB = statusPriority[orderB.status] || 0;
        
        if (priorityA !== priorityB) {
            return priorityB - priorityA;
        }
        
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        return parseInt(b) - parseInt(a);
    });
    
    const tagsHtml = sortedOrders.map(orderId => {
        const order = chatOrders[orderId];
        const isActive = orderId === currentChat;
        
        const statusIcon = {
            'active': 'fas fa-tag',
            'pending': 'fas fa-clock',
            'completed': 'fas fa-check-circle',
            'cancelled': 'fas fa-times-circle'
        };
        
        return `
            <div class="order-tag ${isActive ? 'active' : ''}" data-order="${orderId}" onclick="switchChat('${orderId}')">
                <i class="${statusIcon[order.status] || 'fas fa-tag'}"></i>
                <span>–ó–∞–∫–∞–∑ #${orderId}</span>
                <span class="order-status ${order.status}"></span>
            </div>
        `;
    }).join('');
    
    orderTags.innerHTML = tagsHtml;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ
    if (!currentChat && sortedOrders.length > 0) {
        currentChat = sortedOrders[0];
        loadChatMessages(currentChat);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤
function updateReviewsPage() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
        allReviews = globalReviews || [];
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        reviewsPage = 0;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingIndicator = document.getElementById('reviewsLoading');
        const reviewsContainer = document.getElementById('reviewsContainer');
        
        if (loadingIndicator) loadingIndicator.style.display = 'flex';
        if (reviewsContainer) reviewsContainer.innerHTML = '';
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (loadingIndicator) loadingIndicator.style.display = 'none';
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –æ—Ç–∑—ã–≤—ã
            if (reviewsContainer) {
                if (allReviews.length === 0) {
                    reviewsContainer.innerHTML = `
                        <div class="reviews-empty">
                            <i class="fas fa-star"></i>
                            <h3>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤</h3>
                            <p>–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤!</p>
                        </div>
                    `;
                } else {
                    reviewsContainer.innerHTML = renderReviewsPage();
                }
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–≤–µ–∑–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
            initReviewsPageStars();
        }, 500);
        
    } catch (error) {
        console.error('Error in updateReviewsPage:', error);
        
        const reviewsContainer = document.getElementById('reviewsContainer');
        if (reviewsContainer) {
            reviewsContainer.innerHTML = `
                <div class="reviews-empty">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã</p>
                </div>
            `;
        }
    }
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
let reviewsUpdateInterval;
let chatUpdateInterval;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function loadAllDataFromDB() {
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    await loadAllDataWithCache();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function startPeriodicUpdates() {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    if (reviewsUpdateInterval) clearInterval(reviewsUpdateInterval);
    if (chatUpdateInterval) clearInterval(chatUpdateInterval);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    reviewsUpdateInterval = setInterval(() => {
        console.log('üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤...');
        loadReviewsFromDB(true);
    }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    chatUpdateInterval = setInterval(() => {
        console.log('üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞...');
        loadChatMessagesFromDB(true);
        loadChatOrdersFromDB(true);
    }, 10 * 1000); // 10 —Å–µ–∫—É–Ω–¥
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    ordersUpdateInterval = setInterval(() => {
        console.log('üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤...');
        loadDataWithFallback('requests', true);
    }, 30 * 1000); // 30 —Å–µ–∫—É–Ω–¥
    
    console.log('‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function stopPeriodicUpdates() {
    if (reviewsUpdateInterval) {
        clearInterval(reviewsUpdateInterval);
        reviewsUpdateInterval = null;
    }
    if (chatUpdateInterval) {
        clearInterval(chatUpdateInterval);
        chatUpdateInterval = null;
    }
    if (ordersUpdateInterval) {
        clearInterval(ordersUpdateInterval);
        ordersUpdateInterval = null;
    }
    console.log('‚èπÔ∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
async function forceUpdateAllData() {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    await Promise.all([
        loadReviewsFromDB(true),
        loadDataWithFallback('requests', true),
        loadChatMessagesFromDB(true),
        loadChatOrdersFromDB(true)
    ]);
    
    console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ
function getCacheInfo() {
    const now = Date.now();
    const info = {};
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –≤ –ø–∞–º—è—Ç–∏
    Object.keys(window.dataCache).forEach(key => {
        const cache = window.dataCache[key];
        const timeSinceUpdate = now - cache.lastUpdate;
        const minutesSinceUpdate = Math.floor(timeSinceUpdate / (1000 * 60));
        
        info[key] = {
            lastUpdate: new Date(cache.lastUpdate).toLocaleString('ru-RU'),
            minutesSinceUpdate,
            dataCount: Array.isArray(cache.data) ? cache.data.length : Object.keys(cache.data).length,
            updateInterval: Math.floor(cache.updateInterval / (1000 * 60)) + ' –º–∏–Ω',
            hasMoreData: key === 'reviews' ? window.hasMoreReviews : 
                        key === 'chatMessages' ? window.hasMoreChatMessages : false
        };
    });
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ localStorage
    Object.keys(CACHE_KEYS).forEach(key => {
        try {
            const cached = localStorage.getItem(CACHE_KEYS[key]);
            if (cached) {
                const cacheData = JSON.parse(cached);
                const timeSinceUpdate = now - cacheData.lastUpdate;
                const minutesSinceUpdate = Math.floor(timeSinceUpdate / (1000 * 60));
                
                info[`${key}_localStorage`] = {
                    lastUpdate: new Date(cacheData.lastUpdate).toLocaleString('ru-RU'),
                    minutesSinceUpdate,
                    dataCount: Array.isArray(cacheData.data) ? cacheData.data.length : 1,
                    totalCount: cacheData.totalCount,
                    hasMoreData: cacheData.hasMoreData
                };
            }
        } catch (error) {
            info[`${key}_localStorage`] = { error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è' };
        }
    });
    
    return info;
}

function renderReviews(){
  try {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –±–∞–∑—É –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –≤—Å–µ—Ö —É—Å–ª—É–≥
    const reviews = globalReviews || [];
  const avg=reviews.length?(reviews.reduce((s,r)=>s+r.rating,0)/reviews.length).toFixed(1):"-";
  const starsAvg=Array(5).fill(0).map((_,i)=>`<i class="fas fa-star${reviews.length&&i+1<=Math.round(avg)?'':'-o'}"></i>`).join('');
  const listHtml=reviews.map(r=>{
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —é–∑–µ—Ä–Ω–µ–π–º
      const hasUsername = r.user && r.user.startsWith('@');
    const userClass = hasUsername ? 'review-user' : 'review-user no-username';
    
      return `<div class="review-card"><div class="review-head"><span class="${userClass}" data-has-username="${hasUsername}">${r.user}</span><span class="review-date">${r.date || ''}</span></div><div class="review-stars">${'‚òÖ'.repeat(r.rating || 0)}${'‚òÜ'.repeat(5-(r.rating || 0))}</div><p>${r.comment || ''}</p></div>`;
  }).join('');
    
    // –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ" (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const loadMoreButton = window.hasMoreReviews ? `
      <div class="load-more-container">
        <button id="loadMoreReviews" class="btn btn-secondary load-more-btn" onclick="loadMoreReviews()">
          <i class="fas fa-history"></i>
          –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ –æ—Ç–∑—ã–≤—ã
        </button>
      </div>
    ` : '';
    
    const listSection= reviews.length?`<div class="reviews-list scrollable">${listHtml}</div>${loadMoreButton}`:'<p class="no-reviews">–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤</p>';

  // star selector html
  const starSelHtml=Array(5).fill(0).map((_,i)=>`<i data-val="${i+1}" class="fas fa-star"></i>`).join('');

  return `<div class="review-tile"><div class="reviews-summary"><span class="avg">${avg}</span>${starsAvg}<span class="count">(${reviews.length})</span></div>${listSection}
  <div class="leave-review-area">
    <div class="review-invite-text">–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤</div>
    <div class="star-select" id="starSelect">${starSelHtml}</div>
    <textarea id="reviewText" placeholder="${getText('servicesPage.reviews.form.placeholder', '–í–∞—à –æ—Ç–∑—ã–≤...')}"></textarea>
    <button class="btn btn-primary btn-send" id="sendReviewBtn" disabled>${getText('servicesPage.reviews.form.submitButton', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å')}</button>
  </div></div>`;
  } catch (error) {
    console.error('Error in renderReviews:', error);
    return '<div class="review-tile"><p class="no-reviews">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤</p></div>';
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–∑—ã–≤–æ–≤
function renderReviewsPage() {
  try {
    const reviews = allReviews || [];
    const avg = reviews.length ? (reviews.reduce((s, r) => s + r.rating, 0) / reviews.length).toFixed(1) : "0.0";
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    document.getElementById('totalReviews').textContent = `(${reviews.length})`;
    document.getElementById('averageRating').textContent = avg;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    const avgStars = document.getElementById('avgStars');
    if (avgStars) {
      const avgNum = Math.round(parseFloat(avg));
      avgStars.innerHTML = Array(5).fill(0).map((_, i) => 
        `<i class="fas fa-star${i < avgNum ? '' : '-o'}"></i>`
      ).join('');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const startIndex = reviewsPage * reviewsPerPage;
    const endIndex = startIndex + reviewsPerPage;
    const currentReviews = reviews.slice(startIndex, endIndex);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –æ—Ç–∑—ã–≤—ã
    hasMoreReviews = endIndex < reviews.length;
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –æ—Ç–∑—ã–≤—ã –≤ —Å—Ç–∏–ª–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å–ª—É–≥
    const reviewsHtml = currentReviews.map(review => {
      const hasUsername = review.user && review.user.startsWith('@');
      const userName = review.user || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const userInitial = userName.charAt(0).toUpperCase();
      
      return `
        <div class="review-card">
          <div class="review-header">
            <div class="review-avatar">
              ${userInitial}
            </div>
            <div class="review-info">
              <h4 data-has-username="${hasUsername}">${userName}</h4>
              <p class="review-date">${review.date || ''}</p>
            </div>
          </div>
          <div class="review-stars">
            ${'‚òÖ'.repeat(review.rating || 0)}${'‚òÜ'.repeat(5 - (review.rating || 0))}
          </div>
          <p class="review-text">${review.comment || ''}</p>
        </div>
      `;
    }).join('');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
    const loadMoreSection = document.getElementById('loadMoreSection');
    if (loadMoreSection) {
      loadMoreSection.style.display = hasMoreReviews ? 'block' : 'none';
    }
    
    return reviewsHtml;
  } catch (error) {
    console.error('Error in renderReviewsPage:', error);
    return '<div class="reviews-empty"><i class="fas fa-exclamation-triangle"></i><h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3><p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã</p></div>';
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
function loadMoreReviews() {
  try {
    if (!hasMoreReviews) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const loadMoreBtn = document.querySelector('.load-more-btn');
    if (loadMoreBtn) {
      loadMoreBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>';
      loadMoreBtn.disabled = true;
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    reviewsPage++;
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã
    const startIndex = reviewsPage * reviewsPerPage;
    const endIndex = startIndex + reviewsPerPage;
    const newReviews = allReviews.slice(startIndex, endIndex);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –æ—Ç–∑—ã–≤—ã
    hasMoreReviews = endIndex < allReviews.length;
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –≤ —Å—Ç–∏–ª–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Å–ª—É–≥
    const newReviewsHtml = newReviews.map(review => {
      const hasUsername = review.user && review.user.startsWith('@');
      const userName = review.user || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const userInitial = userName.charAt(0).toUpperCase();
      
      return `
        <div class="review-card">
          <div class="review-header">
            <div class="review-avatar">
              ${userInitial}
            </div>
            <div class="review-info">
              <h4 data-has-username="${hasUsername}">${userName}</h4>
              <p class="review-date">${review.date || ''}</p>
            </div>
          </div>
          <div class="review-stars">
            ${'‚òÖ'.repeat(review.rating || 0)}${'‚òÜ'.repeat(5 - (review.rating || 0))}
          </div>
          <p class="review-text">${review.comment || ''}</p>
        </div>
      `;
    }).join('');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
    const reviewsContainer = document.getElementById('reviewsContainer');
    if (reviewsContainer) {
      reviewsContainer.insertAdjacentHTML('beforeend', newReviewsHtml);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
    if (loadMoreBtn) {
      if (hasMoreReviews) {
        loadMoreBtn.innerHTML = '<i class="fas fa-chevron-down"></i><span>–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ</span>';
        loadMoreBtn.disabled = false;
      } else {
        loadMoreBtn.style.display = 'none';
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"
    const loadMoreSection = document.getElementById('loadMoreSection');
    if (loadMoreSection) {
      loadMoreSection.style.display = hasMoreReviews ? 'block' : 'none';
    }
    
  } catch (error) {
    console.error('Error in loadMoreReviews:', error);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const loadMoreBtn = document.querySelector('.load-more-btn');
    if (loadMoreBtn) {
      loadMoreBtn.innerHTML = '<i class="fas fa-chevron-down"></i><span>–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ</span>';
      loadMoreBtn.disabled = false;
    }
  }
}

function renderOrders(){
  try {
    const orders = globalOrders || [];
    
    if (orders.length === 0) {
      return '';
    }
    
    const listHtml = orders.map(order => {
      return `
        <div class="order-card order-card-${order.statusClass.replace('status-', '')}" onclick="openOrderDetails(${order.id})">
          <div class="order-header">
            <span class="order-id">–ó–∞–∫–∞–∑ #${order.id}</span>
            <span class="order-date">${order.date}</span>
          </div>
          <div class="order-content">
            <div class="order-service">
              <strong>–£—Å–ª—É–≥–∞:</strong> ${order.service || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
            </div>
            <div class="order-message">
              <strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${order.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}
            </div>
          </div>
        </div>
      `;
    }).join('');
    
    return listHtml;
  } catch (error) {
    console.error('Error in renderOrders:', error);
    return '<div class="orders-tile"><p class="no-orders">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤</p></div>';
  }
}

function openOrderDetails(orderId) {
  try {
    const order = globalOrders.find(o => o.id == orderId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º == –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞
    
    if (!order) {
      console.error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', orderId);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const orderModal = document.getElementById('orderModal');
    const orderModalContent = document.getElementById('orderModalContent');
    
    if (!orderModal || !orderModalContent) {
      console.error('orderModal –∏–ª–∏ orderModalContent –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    orderModalContent.innerHTML = `
      <div class="service-modal">
        <h2 class="service-title">
          <i class="fas fa-shopping-cart"></i>
          –ó–∞–∫–∞–∑ #${order.id}
        </h2>
        
        <div class="service-details">
          <div class="detail-item">
            <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:</h4>
            <div class="order-info">
              <div class="info-row">
                <span class="info-label">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</span>
                <span class="info-value">#${order.id}</span>
              </div>
              <div class="info-row">
                <span class="info-label">–£—Å–ª—É–≥–∞:</span>
                <span class="info-value">${order.service || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
              </div>
              <div class="info-row">
                <span class="info-label">–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</span>
                <span class="info-value">${order.date}</span>
              </div>
              <div class="info-row">
                <span class="info-label">–°—Ç–∞—Ç—É—Å:</span>
                <span class="order-status ${order.statusClass}">${order.status}</span>
              </div>
            </div>
          </div>
          
          <div class="detail-item">
            <h4>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</h4>
            <div class="order-message">
              ${order.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}
            </div>
          </div>
        </div>
        
        <div class="modal-actions">
          <button class="btn btn-secondary" onclick="openChatForOrder(${order.id})">
            <i class="fas fa-comments"></i>
            <span>–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç</span>
          </button>
          <button class="btn btn-primary" onclick="closeOrderModal()">
            <i class="fas fa-check"></i>
            <span>–ü–æ–Ω—è—Ç–Ω–æ</span>
          </button>
        </div>
      </div>
    `;
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    orderModal.style.display = 'block';
    document.body.style.overflow = 'hidden';
    
  } catch (error) {
    console.error('Error in openOrderDetails:', error);
  }
}

function closeOrderModal() {
  const orderModal = document.getElementById('orderModal');
  if (orderModal) {
    orderModal.style.display = 'none';
  }
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  document.body.style.overflow = 'auto';
}

function openChatForOrder(orderId) {
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫–∞–∑–∞
  closeOrderModal();
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞
  showPage('chat-page');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
  currentChat = orderId.toString();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  if (!window.chatOrders) {
    loadChatOrdersFromDB(true);
  } else {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ –∑–∞–∫–∞–∑–æ–≤ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–π
    updateChatOrderTags();
  }
  
  console.log(`üí¨ –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
}

// Carousel functionality
let currentSlide = 0;
let carouselInterval;
const slideDuration = 4000; // 4 seconds per slide

function initCarousel() {
    const slides = document.querySelectorAll('.carousel-slide');
    const indicators = document.querySelectorAll('.indicator');
    
    if (slides.length === 0) return;
    
    // Stop any existing carousel
    stopCarousel();
    
    // Reset all slides to initial state and position them correctly
    slides.forEach((slide, index) => {
        slide.classList.remove('active', 'prev', 'next');
        if (index === 0) {
            slide.classList.add('active');
        } else {
            slide.classList.add('next');
        }
    });
    
    // Reset all indicators
    indicators.forEach(indicator => {
        indicator.classList.remove('active');
    });
    
    // Set first slide as active
    slides[0].classList.add('active');
    indicators[0].classList.add('active');
    currentSlide = 0;
    
    // Start auto-rotation with a small delay
    setTimeout(() => {
    startCarousel();
    }, 1000);
    
    // Indicators are now just visual - no click functionality
    // indicators.forEach((indicator, index) => {
    //     indicator.addEventListener('click', () => {
    //         goToSlide(index);
    //     });
    // });
}

function startCarousel() {
    if (carouselInterval) {
        clearInterval(carouselInterval);
    }
    
    carouselInterval = setInterval(() => {
        nextSlide();
    }, slideDuration);
}

function stopCarousel() {
    if (carouselInterval) {
        clearInterval(carouselInterval);
        carouselInterval = null;
    }
}

function nextSlide() {
    const slides = document.querySelectorAll('.carousel-slide');
    const indicators = document.querySelectorAll('.indicator');
    
    if (slides.length === 0) return;
    
    const nextSlideIndex = (currentSlide + 1) % slides.length;
    
    // Remove active class from current slide and indicator
    slides[currentSlide].classList.remove('active');
    indicators[currentSlide].classList.remove('active');
    
    // Add prev class to current slide (it will animate to the left)
    slides[currentSlide].classList.add('prev');
    
    // Move to next slide
    currentSlide = nextSlideIndex;
    
    // Add active class to new slide and indicator
    slides[currentSlide].classList.remove('prev', 'next');
    slides[currentSlide].classList.add('active');
    indicators[currentSlide].classList.add('active');
    
    // Prepare the next slide in the sequence to come from the right
    const nextNextIndex = (currentSlide + 1) % slides.length;
    slides[nextNextIndex].classList.add('next');
}

function goToSlide(slideIndex) {
    const slides = document.querySelectorAll('.carousel-slide');
    const indicators = document.querySelectorAll('.indicator');
    
    if (slideIndex < 0 || slideIndex >= slides.length) return;
    
    // Don't do anything if clicking on the same slide
    if (slideIndex === currentSlide) return;
    
    // Determine direction for proper animation
    const isNext = slideIndex > currentSlide || (currentSlide === slides.length - 1 && slideIndex === 0);
    
    if (isNext) {
        // Prepare next slide to come from the right
        slides[slideIndex].classList.add('next');
        slides[slideIndex].offsetHeight; // Force reflow
    }
    
    // Remove active class from current slide and indicator
    slides[currentSlide].classList.remove('active');
    indicators[currentSlide].classList.remove('active');
    
    // Add prev class to current slide (it will animate to the left)
    slides[currentSlide].classList.add('prev');
    
    // Set new current slide
    currentSlide = slideIndex;
    
    // Add active class to new slide and indicator
    slides[currentSlide].classList.remove('prev', 'next');
    slides[currentSlide].classList.add('active');
    indicators[currentSlide].classList.add('active');
    
    // Restart auto-rotation
    startCarousel();
}

// Initialize carousel when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Initialize carousel if we're on home page
    if (document.getElementById('home').classList.contains('active')) {
        setTimeout(initCarousel, 500);
    }
});

// Re-initialize carousel when switching to home page
const originalShowPage = showPage;
showPage = function(pageId) {
    originalShowPage(pageId);
    
    if (pageId === 'home') {
        setTimeout(initCarousel, 500);
    } else {
        stopCarousel();
    }
    
    // Load texts for new pages
    if (pageId === 'help-page') {
        setTimeout(loadHelpPageTexts, 100);
    } else if (pageId === 'feedback-page') {
        setTimeout(loadFeedbackPageTexts, 100);
        // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        setTimeout(() => {
            fillFeedbackForm();
        }, 300);
    } else if (pageId === 'orders-page') {
        setTimeout(loadOrdersPageTexts, 100);
    } else if (pageId === 'chat-page') {
        setTimeout(loadChatPageTexts, 300);
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç
        setTimeout(() => {
            loadChatMessages(currentChat);
        }, 400);
    } else if (pageId === 'reviews-page') {
        setTimeout(loadReviewsPageTexts, 100);
    }
};

// Profile Actions Functions
function showProfileAction(action) {
    switch(action) {
        case 'help':
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–º–æ—â–∏
            showPage('help-page');
            break;
            
        case 'feedback':
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            showPage('feedback-page');
            break;
            
        case 'orders':
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
            showPage('orders-page');
            break;
            
        case 'chat':
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞
            showPage('chat-page');
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
            loadChatOrdersFromDB(true);
            break;
            
        case 'reviews':
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤
            showPage('reviews-page');
            break;
            
        default:
            console.log('Unknown profile action:', action);
    }
}

// Chat data (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î)
const chatData = {};

let currentChat = null;

// Chat page functions
function switchChat(chatId) {
    currentChat = chatId;
    
    // Update active tag
    document.querySelectorAll('.order-tag').forEach(tag => {
        tag.classList.remove('active');
    });
    const activeTag = document.querySelector(`[data-order="${chatId}"]`);
    if (activeTag) {
        activeTag.classList.add('active');
    }
    
    // Load messages
    loadChatMessages(chatId);
    
    // Update input area based on order status (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–Ω—ã–π)
    updateChatInputArea(chatId);
}

function loadChatMessages(chatId) {
    const chatMessages = document.getElementById('chatMessages');
    if (!chatMessages) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    const dbMessages = window.chatData && window.chatData[chatId] ? window.chatData[chatId] : [];
    
    if (dbMessages.length === 0) {
        chatMessages.innerHTML = '<div class="no-messages">–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</div>';
        return;
    }
    
    const messagesHtml = dbMessages.map((dbMsg, index) => {
        return `
            <div class="message ${dbMsg.isAdmin ? 'message-admin' : 'message-user'}">
                <div class="message-content">
                    <div class="message-text">${dbMsg.text}</div>
                    <div class="message-time">${new Date(dbMsg.timestamp).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</div>
                </div>
            </div>
        `;
    }).join('');
    
    chatMessages.innerHTML = messagesHtml;
    
    // Scroll to bottom
    setTimeout(() => {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }, 100);
}

function sendMessage() {
    const messageInput = document.getElementById('chatMessageInput');
    const message = messageInput.value.trim();
    
    if (!message) return;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–µ–∫–µ–Ω–¥
    trackImportantEvent('chat_message', {
        orderId: currentChat,
        message: message,
        timestamp: new Date().toISOString()
    });
    
    // Clear input
    messageInput.value = '';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞
    loadChatMessages(currentChat);
    
    // Simulate admin response after 2 seconds
    setTimeout(() => {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –ë–î
        trackImportantEvent('chat_message', {
            orderId: currentChat,
            message: '–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –û—Ç–≤–µ—á—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
            timestamp: new Date().toISOString(),
            isAdmin: true
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        loadChatMessages(currentChat);
    }, 2000);
}

function updateChatInputArea(chatId) {
    const inputWrapper = document.getElementById('chatInputWrapper');
    const reviewWrapper = document.getElementById('chatReviewWrapper');
    const messageInput = document.getElementById('chatMessageInput');
    
    if (!inputWrapper || !reviewWrapper || !messageInput) return;
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    inputWrapper.style.display = 'flex';
    reviewWrapper.style.display = 'none';
    messageInput.disabled = false;
}

function loadOrderTags() {
    console.log('loadOrderTags called');
    
    // Wait a bit more to ensure DOM is ready
    setTimeout(() => {
        const orderTags = document.getElementById('orderTags');
        if (!orderTags) {
            console.error('orderTags element not found');
            return;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        const dbChatData = window.chatData || {};
        console.log('dbChatData:', dbChatData);
        console.log('currentChat:', currentChat);
        
        if (Object.keys(dbChatData).length === 0) {
            orderTags.innerHTML = '<div class="no-orders">–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
            return;
        }
        
        // Sort orders: active first, then completed
        const sortedOrders = Object.keys(dbChatData).sort((a, b) => {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∞–∫—Ç–∏–≤–Ω—ã–º–∏
            return parseInt(a) - parseInt(b);
        });
        
        console.log('sortedOrders:', sortedOrders);
        
        const tagsHtml = sortedOrders.map(orderId => {
            const isActive = orderId === currentChat;
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –∑–∞–∫–∞–∑—ã –∞–∫—Ç–∏–≤–Ω—ã–µ
            const status = 'active';
            const statusIcon = {
                'active': 'fas fa-tag',
                'completed': 'fas fa-check-circle'
            };
            
            return `
                <div class="order-tag ${isActive ? 'active' : ''}" data-order="${orderId}" onclick="switchChat('${orderId}')">
                    <i class="${statusIcon[status]}"></i>
                    <span>–ó–∞–∫–∞–∑ #${orderId}</span>
                    <span class="order-status ${status}"></span>
                </div>
            `;
        }).join('');
        
        console.log('tagsHtml:', tagsHtml);
        orderTags.innerHTML = tagsHtml;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ
        if (!currentChat && sortedOrders.length > 0) {
            currentChat = sortedOrders[0];
            loadChatMessages(currentChat);
        }
    }, 100);
}

function openTelegramChat() {
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.openTelegramLink('https://t.me/sukhorukov_nikita');
    } else {
        window.open('https://t.me/sukhorukov_nikita', '_blank');
    }
}

function copyTelegramLink() {
    const link = 'https://t.me/sukhorukov_nikita';
    navigator.clipboard.writeText(link).then(() => {
        showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
    }).catch(() => {
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'error');
    });
}

// Feedback form handler
document.addEventListener('DOMContentLoaded', function() {
    const feedbackForm = document.getElementById('feedbackForm');
    if (feedbackForm) {
        feedbackForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(feedbackForm);
            const data = {
                name: formData.get('feedbackName'),
                subject: formData.get('feedbackSubject'),
                message: formData.get('feedbackMessage')
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∫–µ–Ω–¥
            trackImportantEvent('support_request', {
                formData: data,
                source: 'feedback_page'
            });
            
            showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 'success');
            feedbackForm.reset();
            
            // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã
            setTimeout(() => {
                fillFeedbackForm();
            }, 100);
        });
    }
    
    // Chat message input handler
    const chatMessageInput = document.getElementById('chatMessageInput');
    if (chatMessageInput) {
        chatMessageInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
        
        // Auto-resize textarea
        chatMessageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 100) + 'px';
        });
    }
});

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–õ–ê–î–û–ß–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ =====

// –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–ª–∞–¥–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function checkAdminAndShowDebugButton() {
    const adminIds = ['585028258']; // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const currentUserId = window.userData?.id;
    
    if (adminIds.includes(String(currentUserId))) {
        const debugBtn = document.getElementById('adminDebugBtn');
        if (debugBtn) {
            debugBtn.style.display = 'flex';
            console.log('üîß –ö–Ω–æ–ø–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑–∞–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', currentUserId);
        }
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–ª–∞–¥–∫–∏
function showAdminDebug() {
    showPage('admin-debug-page');
    refreshDebugInfo();
}

// –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
async function refreshDebugInfo() {
    console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    updateUserDebugInfo();
    
    // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    updateSystemDebugInfo();
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
    updateCacheDebugInfo();
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö
    updateOrdersDebugInfo();
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–µ–Ω–¥–µ
    await updateBackendDebugInfo();
}

// –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function updateUserDebugInfo() {
    const userInfo = document.getElementById('debugUserInfo');
    if (!userInfo) return;
    
    const userData = window.userData || {};
    const tg = window.tg;
    
    const info = {
        'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': userData.id || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
        '–ò–º—è': userData.firstName || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
        '–§–∞–º–∏–ª–∏—è': userData.lastName || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞',
        'Username': userData.username || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
        '–Ø–∑—ã–∫': userData.languageCode || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
        'Premium': userData.isPremium ? '–î–∞' : '–ù–µ—Ç',
        'Telegram Web App': tg ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        '–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞': getLaunchMode?.() || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
        'Backend URL': getBackendUrl?.() || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    };
    
    userInfo.innerHTML = formatDebugInfo(info);
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
function updateSystemDebugInfo() {
    const systemInfo = document.getElementById('debugSystemInfo');
    if (!systemInfo) return;
    
    const info = {
        'User Agent': navigator.userAgent,
        '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞': navigator.platform,
        '–Ø–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞': navigator.language,
        'Cookies –≤–∫–ª—é—á–µ–Ω—ã': navigator.cookieEnabled ? '–î–∞' : '–ù–µ—Ç',
        'LocalStorage –¥–æ—Å—Ç—É–ø–µ–Ω': typeof(Storage) !== 'undefined' ? '–î–∞' : '–ù–µ—Ç',
        'IndexedDB –¥–æ—Å—Ç—É–ø–µ–Ω': 'indexedDB' in window ? '–î–∞' : '–ù–µ—Ç',
        '–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏': new Date().toLocaleString('ru-RU'),
        '–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞': `${screen.width}x${screen.height}`,
        '–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞': `${window.innerWidth}x${window.innerHeight}`,
        '–¢–µ–º–∞': document.body.classList.contains('tg-dark-theme') ? '–¢–µ–º–Ω–∞—è' : '–°–≤–µ—Ç–ª–∞—è'
    };
    
    systemInfo.innerHTML = formatDebugInfo(info);
}

// –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
function updateCacheDebugInfo() {
    const cacheInfo = document.getElementById('debugCacheInfo');
    if (!cacheInfo) return;
    
    const cacheData = {};
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –≤ –ø–∞–º—è—Ç–∏
    if (window.dataCache) {
        Object.keys(window.dataCache).forEach(key => {
            const cache = window.dataCache[key];
            cacheData[`–ö—ç—à ${key}`] = {
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π': Array.isArray(cache.data) ? cache.data.length : 'N/A',
                '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ': cache.lastUpdate ? new Date(cache.lastUpdate).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞',
                '–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è': cache.updateInterval ? `${cache.updateInterval / 1000} —Å–µ–∫` : 'N/A'
            };
        });
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ localStorage
    const localStorageInfo = {};
    Object.keys(localStorage).forEach(key => {
        if (key.startsWith('cache_')) {
            try {
                const data = JSON.parse(localStorage.getItem(key));
                localStorageInfo[key] = {
                    '–†–∞–∑–º–µ—Ä': `${JSON.stringify(data).length} –±–∞–π—Ç`,
                    '–ó–∞–ø–∏—Å–µ–π': Array.isArray(data.data) ? data.data.length : 'N/A',
                    '–û–±–Ω–æ–≤–ª–µ–Ω': data.lastUpdate ? new Date(data.lastUpdate).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'
                };
            } catch (e) {
                localStorageInfo[key] = '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞';
            }
        }
    });
    
    if (Object.keys(localStorageInfo).length > 0) {
        cacheData['localStorage'] = localStorageInfo;
    }
    
    cacheInfo.innerHTML = formatDebugInfo(cacheData);
}

// –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö
function updateOrdersDebugInfo() {
    const ordersInfo = document.getElementById('debugOrdersInfo');
    if (!ordersInfo) return;
    
    const info = {
        '–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–∞–º—è—Ç–∏': globalOrders ? globalOrders.length : 0,
        '–ó–∞–∫–∞–∑—ã –≤ –∫—ç—à–µ': window.dataCache?.requests?.data?.length || 0,
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω': window.userData?.id ? '–î–∞' : '–ù–µ—Ç',
        'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': window.userData?.id || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
        '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞': window.userData?.id && window.userData.id !== 'unknown' ? '–î–∞' : '–ù–µ—Ç'
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–∫–∞–∑–∞—Ö
    if (globalOrders && globalOrders.length > 0) {
        const sampleOrders = globalOrders.slice(0, 3).map(order => ({
            'ID': order.id,
            '–£—Å–ª—É–≥–∞': order.service,
            '–°—Ç–∞—Ç—É—Å': order.status,
            '–î–∞—Ç–∞': order.date
        }));
        info['–ü—Ä–∏–º–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤'] = sampleOrders;
    }
    
    ordersInfo.innerHTML = formatDebugInfo(info);
}

// –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–µ–Ω–¥–µ
async function updateBackendDebugInfo() {
    const backendInfo = document.getElementById('debugBackendInfo');
    if (!backendInfo) return;
    
    const info = {
        'Backend URL': getBackendUrl?.() || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        '–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è': '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...'
    };
    
    backendInfo.innerHTML = formatDebugInfo(info);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—ç–∫–µ–Ω–¥–∞
    try {
        const backendUrl = getBackendUrl?.();
        if (backendUrl) {
            const response = await fetch(`${backendUrl}/health`, { 
                method: 'GET', 
                mode: 'cors', 
                cache: 'no-store',
                timeout: 5000
            });
            
            if (response.ok) {
                const healthData = await response.json().catch(() => ({}));
                info['–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'] = '–û–Ω–ª–∞–π–Ω';
                info['–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞'] = `${response.headers.get('x-response-time') || 'N/A'}`;
                info['–í–µ—Ä—Å–∏—è API'] = healthData.version || 'N/A';
            } else {
                info['–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'] = `–û—à–∏–±–∫–∞ ${response.status}`;
            }
        } else {
            info['–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'] = 'URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
        }
    } catch (error) {
        info['–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'] = `–û—à–∏–±–∫–∞: ${error.message}`;
    }
    
    backendInfo.innerHTML = formatDebugInfo(info);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
function formatDebugInfo(data, level = 0) {
    let html = '';
    
    Object.keys(data).forEach(key => {
        const value = data[key];
        
        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
            html += `<div class="debug-item" style="margin-left: ${level * 20}px;">`;
            html += `<div class="debug-label">${key}:</div>`;
            html += formatDebugInfo(value, level + 1);
            html += '</div>';
        } else {
            html += `<div class="debug-item" style="margin-left: ${level * 20}px;">`;
            html += `<div class="debug-label">${key}:</div>`;
            html += `<div class="debug-value">${formatValue(value)}</div>`;
            html += '</div>';
        }
    });
    
    return html;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function formatValue(value) {
    if (value === null || value === undefined) {
        return '<em>null</em>';
    }
    
    if (typeof value === 'boolean') {
        return value ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç';
    }
    
    if (typeof value === 'number') {
        return value.toString();
    }
    
    if (Array.isArray(value)) {
        return value.length === 0 ? '<em>–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤</em>' : `[${value.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤]`;
    }
    
    return String(value);
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function exportDebugData() {
    const debugData = {
        timestamp: new Date().toISOString(),
        userData: window.userData,
        systemInfo: {
            userAgent: navigator.userAgent,
            platform: navigator.platform,
            language: navigator.language,
            screenSize: `${screen.width}x${screen.height}`,
            windowSize: `${window.innerWidth}x${window.innerHeight}`
        },
        cacheInfo: window.dataCache,
        ordersInfo: {
            globalOrders: globalOrders,
            ordersCount: globalOrders ? globalOrders.length : 0
        },
        backendInfo: {
            url: getBackendUrl?.(),
            mode: getLaunchMode?.()
        }
    };
    
    const dataStr = JSON.stringify(debugData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `debug-data-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    showNotification('–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
}

// –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
function clearAllCache() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à? –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.')) {
        // –û—á–∏—â–∞–µ–º localStorage
        Object.keys(localStorage).forEach(key => {
            if (key.startsWith('cache_')) {
                localStorage.removeItem(key);
            }
        });
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        if (window.dataCache) {
            Object.keys(window.dataCache).forEach(key => {
                if (window.dataCache[key] && window.dataCache[key].data) {
                    window.dataCache[key].data = Array.isArray(window.dataCache[key].data) ? [] : {};
                    window.dataCache[key].lastUpdate = 0;
                }
            });
        }
        
        // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        globalOrders = [];
        globalChatMessages = [];
        
        showNotification('–ö—ç—à –æ—á–∏—â–µ–Ω!', 'success');
        refreshDebugInfo();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
function initDebugButton() {
    setTimeout(() => {
        checkAdminAndShowDebugButton();
    }, 1000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤–µ–∑–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–∑—ã–≤–æ–≤
function initReviewsPageStars() {
    try {
        const starSelect = document.getElementById('starSelect');
        const reviewText = document.getElementById('reviewText');
        const sendBtn = document.getElementById('sendReviewBtn');
        
        if (!starSelect || !reviewText || !sendBtn) return;
        
        const stars = starSelect.querySelectorAll('i');
        let selectedRating = 0;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–Ω–∞ –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        reviewText.style.display = 'none';
        sendBtn.style.display = 'none';
        sendBtn.disabled = true;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        stars.forEach(star => {
            star.classList.remove('active');
            star.replaceWith(star.cloneNode(true));
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–≤–µ–∑–¥
        const newStars = starSelect.querySelectorAll('i');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–≤–µ–∑–¥–æ—á–µ–∫
        newStars.forEach((star, index) => {
            star.addEventListener('click', () => {
                selectedRating = index + 1;
                
                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã
                newStars.forEach((s, i) => {
                    if (i < selectedRating) {
                        s.classList.add('active');
                    } else {
                        s.classList.remove('active');
                    }
                });
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫—É
                reviewText.style.display = 'block';
                sendBtn.style.display = 'block';
                reviewText.focus();
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–≤–µ–∑–¥—ã
                sendBtn.disabled = false;
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
        sendBtn.addEventListener('click', () => {
            const currentUserData = window.userData || userData;
            console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤, userData:', currentUserData);
            
            const reviewData = {
                rating: selectedRating,
                comment: reviewText.value.trim() || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è',
                user: currentUserData ? `@${currentUserData.username || currentUserData.firstName}` : '@–≥–æ—Å—Ç—å',
                date: new Date().toLocaleDateString('ru-RU').split('/').reverse().join('.')
            };
            
            console.log('üìù –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞:', reviewData);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±—ç–∫–µ–Ω–¥
            trackImportantEvent('review_submit', {
                rating: selectedRating,
                comment: reviewData.comment,
                user: reviewData.user,
                date: reviewData.date
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –æ–±—â—É—é –±–∞–∑—É
            globalReviews.unshift(reviewData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
            updateReviewsPage();
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            reviewText.value = '';
            reviewText.style.display = 'none';
            sendBtn.style.display = 'none';
            sendBtn.disabled = true;
            selectedRating = 0;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
            newStars.forEach(star => star.classList.remove('active'));
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showNotification('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', 'success');
        });
    } catch (error) {
        console.error('Error in initReviewsPageStars:', error);
    }
}


